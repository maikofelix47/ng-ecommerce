{
    "pipes": [],
    "interfaces": [
        {
            "name": "Address",
            "id": "interface-Address-1cadbf6ed485547a1f8524b850af64a9715dda223eedb6fc70c8b9e972f59c52d0cfba99ac3225b7a5a813dc6b40433d21a41d4e5711e4a2cfadb219abce1947",
            "file": "src/app/checkout/checkout.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { CartItem } from '../models/shopping-cart';\nimport { ShoppingCartService } from '../services/shopping-cart.service';\n\ninterface Payment {\n  paymentMode: string | null;\n  mobileNo: string | null;\n}\n\ninterface Address {\n  county: string | null;\n  town: string | null;\n  estate: string | null;\n  houseAddress: string | null;\n}\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css'],\n})\nexport class CheckoutComponent implements OnInit {\n  public paymentMode: string = '';\n  public paymentDetails: Payment = {\n    paymentMode: '',\n    mobileNo: '',\n  };\n  public addressDetails: Address = {\n    county: '',\n    town: '',\n    estate: '',\n    houseAddress: '',\n  };\n  public cartItems: CartItem[] = [];\n  public cartTotal = 0;\n\n  paymentModeFormGroup = this.formBuilder.group({\n    paymentMode: ['', Validators.required],\n    mobileNo: [''],\n  });\n  addressFormGroup = this.formBuilder.group({\n    county: ['', Validators.required],\n    town: ['', Validators.required],\n    estate: ['', Validators.required],\n    houseAddress: ['', Validators.required],\n  });\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: ShoppingCartService,\n    private router: Router\n  ) {}\n  public ngOnInit(): void {\n    this.getCartItems();\n    this.getCartTotal();\n  }\n  public generateCheckoutSummary() {\n    this.paymentDetails = this.paymentModeFormGroup.getRawValue();\n    this.addressDetails = this.addressFormGroup.getRawValue();\n  }\n\n  private getCartItems() {\n    this.cartItems = this.cartService.getCart();\n  }\n  private getCartTotal() {\n    this.cartTotal = this.cartService.getCartTotal();\n  }\n  public completeShopping() {\n    this.cartService.emptyCart();\n    this.router.navigate(['/appreciation']);\n  }\n}\n",
            "properties": [
                {
                    "name": "county",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "estate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "houseAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "town",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Cart",
            "id": "interface-Cart-df75c470ba0d03abc41fb0886788af0274093b42fb505fd0ae73f2a774dab9ac45dd9899297c696b3cba871c0330dbfe3d603b8c2b34586586f78ba222b1caf3",
            "file": "src/app/models/shopping-cart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CartItem{\n    productName: string;\n    productId: number;\n    unitPrice: number;\n    quantity: number;\n    totalPrice: number;\n  }\n  \n  export interface Cart{\n    cartItems: CartItem[];\n    totalPrice: number;\n  }",
            "properties": [
                {
                    "name": "cartItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "totalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CartItem",
            "id": "interface-CartItem-df75c470ba0d03abc41fb0886788af0274093b42fb505fd0ae73f2a774dab9ac45dd9899297c696b3cba871c0330dbfe3d603b8c2b34586586f78ba222b1caf3",
            "file": "src/app/models/shopping-cart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CartItem{\n    productName: string;\n    productId: number;\n    unitPrice: number;\n    quantity: number;\n    totalPrice: number;\n  }\n  \n  export interface Cart{\n    cartItems: CartItem[];\n    totalPrice: number;\n  }",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-229dfc533dd317057981add599d48220934ba88de8bdffc9b03be62adecd5983f5647e455e32c1177e155f1ef28b35f5401a43134ff4c3b74abdf5e66e436300",
            "file": "src/app/category/category.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n\nimport { CategoryService } from '../services/category.service';\nimport { LoaderService } from '../services/loader.service';\nimport { ErrorService } from '../services/shared/error.service';\n\ninterface Category{\n  name: string;\n  featureImg: string;\n  id: number;\n}\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.css']\n})\nexport class CategoryComponent implements OnInit{\n\n  public categories: Category[] = [];\n\n  constructor(private categoryService: CategoryService, \n    private router: Router,\n    private loaderService: LoaderService,\n    private errorService: ErrorService){\n\n  }\n\n  public ngOnInit(): void {\n    this.getCategories();\n  }\n\n  public getCategories(){\n     this.showLoader();\n     this.categoryService.getAll().subscribe((categories: any)=> {\n         this.categories = categories;\n         this.hideLoader();\n     },(error: Error)=> {\n        this.errorService.handleError(error);\n        this.hideLoader();\n     });\n  }\n\n  public goToCategory(categoryId: number){\n     this.router.navigate([`/category/${categoryId}`]);\n  }\n  public showLoader(){\n    this.loaderService.showLoader();\n  }\n  public hideLoader(){\n     this.loaderService.hideLoader();\n  }\n\n}\n",
            "properties": [
                {
                    "name": "featureImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-254016ea7a64a6f3e462c52639a83938d6b214896d3d9e2d538d464f855f762996df315c0cb96d107af693048d3efbd18491f6c7fd0aafc0a6f5c1a60e0f8073-1",
            "file": "src/app/models/category.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\n  id?: number | string;\n  name: string;\n  description: string;\n  featureImg?: string;\n}\n\nexport interface CreateCategoryPayload {\n  name: string;\n  description: string;\n  file: {\n    name: string;\n    lastModilfied: number;\n    size: number;\n    type: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "featureImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Category-1"
        },
        {
            "name": "ColumnDefs",
            "id": "interface-ColumnDefs-ff76d4adc320483048a5f4127cb1a38e7b45512fd2af828561c54870f581cb8eeab606d679c94a51c65754a00de937262bcbe1a4f04d278b3c94b70a2cc7afcb",
            "file": "src/app/models/table-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ColumnDefs{\n        columnDef: string;\n        headerCellDef: string;\n        matCellDef: string;\n}",
            "properties": [
                {
                    "name": "columnDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "headerCellDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "matCellDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CreateCategoryPayload",
            "id": "interface-CreateCategoryPayload-254016ea7a64a6f3e462c52639a83938d6b214896d3d9e2d538d464f855f762996df315c0cb96d107af693048d3efbd18491f6c7fd0aafc0a6f5c1a60e0f8073",
            "file": "src/app/models/category.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\n  id?: number | string;\n  name: string;\n  description: string;\n  featureImg?: string;\n}\n\nexport interface CreateCategoryPayload {\n  name: string;\n  description: string;\n  file: {\n    name: string;\n    lastModilfied: number;\n    size: number;\n    type: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-954b312b67405e0c5dc904fc5986739cfd95f54156d2ad6ca9737fe30df2279cf5c9ed649c4b6390778b76eaaa3e95f329f69af4e1cb3b8e663b8ccca1807dc3",
            "file": "src/app/models/current-user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoginToken } from \"./login-token\";\n\nexport interface CurrentUser{\n    email: string;\n    sessionToken: LoginToken\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sessionToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginToken",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ErrorMessage",
            "id": "interface-ErrorMessage-be1562cfef80372255b8b9ca636cf34a18e637fc6a29954156b83630b036b1d0d808ec280c7b1e6bef2267dfada9ebf9de87368d2e774f228fad8a2c076b87d8",
            "file": "src/app/models/error-messages.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ErrorMessage{\n    message: string;\n}",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FirebaseLoginResponse",
            "id": "interface-FirebaseLoginResponse-1af3b60b3a66320d3c52ced74caf8d582db32a0b59dcfb39721b75a465fa25ad71ffc9f885181a117dde1540cb569809ec06c2b006735622aae726fd0aa380c9",
            "file": "src/app/models/firebase-login-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FirebaseLoginResponse{\n    user: FirebaseUser;\n    providerId: string | null;\n    _tokenResponse?:{\n        kind: string;\n        localId: string;\n        email: string;\n        displayName: string;\n        idToken: string;\n        registered: boolean;\n        refreshToken: string;        \n        expiresIn: string;\n    },\n    operationType: string;\n}\n\nexport interface FirebaseUser {\n    uid: string;\n    email: string;\n    emailVerified: boolean;\n    isAnonymous: boolean;\n    providerData: [\n      {\n        providerId: string;\n        uid: string;\n        displayName: string | null;\n        email: string;\n        phoneNumber: string | null;\n        photoURL: string | null;\n      },\n    ],\n    stsTokenManager: {\n      refreshToken: string;\n      accessToken: string;\n      expirationTime: number;\n    },\n    createdAt: string;\n    lastLoginAt: string;\n    apiKey: string;\n    appName: string;\n}\n",
            "properties": [
                {
                    "name": "_tokenResponse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "operationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "providerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FirebaseUser",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FirebaseUser",
            "id": "interface-FirebaseUser-1af3b60b3a66320d3c52ced74caf8d582db32a0b59dcfb39721b75a465fa25ad71ffc9f885181a117dde1540cb569809ec06c2b006735622aae726fd0aa380c9",
            "file": "src/app/models/firebase-login-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FirebaseLoginResponse{\n    user: FirebaseUser;\n    providerId: string | null;\n    _tokenResponse?:{\n        kind: string;\n        localId: string;\n        email: string;\n        displayName: string;\n        idToken: string;\n        registered: boolean;\n        refreshToken: string;        \n        expiresIn: string;\n    },\n    operationType: string;\n}\n\nexport interface FirebaseUser {\n    uid: string;\n    email: string;\n    emailVerified: boolean;\n    isAnonymous: boolean;\n    providerData: [\n      {\n        providerId: string;\n        uid: string;\n        displayName: string | null;\n        email: string;\n        phoneNumber: string | null;\n        photoURL: string | null;\n      },\n    ],\n    stsTokenManager: {\n      refreshToken: string;\n      accessToken: string;\n      expirationTime: number;\n    },\n    createdAt: string;\n    lastLoginAt: string;\n    apiKey: string;\n    appName: string;\n}\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "appName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isAnonymous",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastLoginAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "providerData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stsTokenManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginToken",
            "id": "interface-LoginToken-b0624decf1a41985497d082ebba9f6f7906479cd042e44cfd56d6c435b19fc142c71a15c72c217c0a85661ea3c94613ae7ba62a53299a8adfeedeacf1a533aeb",
            "file": "src/app/models/login-token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginToken{\n    access_token: string;\n    token_expiration: number;\n};",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "token_expiration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Payment",
            "id": "interface-Payment-1cadbf6ed485547a1f8524b850af64a9715dda223eedb6fc70c8b9e972f59c52d0cfba99ac3225b7a5a813dc6b40433d21a41d4e5711e4a2cfadb219abce1947",
            "file": "src/app/checkout/checkout.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { CartItem } from '../models/shopping-cart';\nimport { ShoppingCartService } from '../services/shopping-cart.service';\n\ninterface Payment {\n  paymentMode: string | null;\n  mobileNo: string | null;\n}\n\ninterface Address {\n  county: string | null;\n  town: string | null;\n  estate: string | null;\n  houseAddress: string | null;\n}\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css'],\n})\nexport class CheckoutComponent implements OnInit {\n  public paymentMode: string = '';\n  public paymentDetails: Payment = {\n    paymentMode: '',\n    mobileNo: '',\n  };\n  public addressDetails: Address = {\n    county: '',\n    town: '',\n    estate: '',\n    houseAddress: '',\n  };\n  public cartItems: CartItem[] = [];\n  public cartTotal = 0;\n\n  paymentModeFormGroup = this.formBuilder.group({\n    paymentMode: ['', Validators.required],\n    mobileNo: [''],\n  });\n  addressFormGroup = this.formBuilder.group({\n    county: ['', Validators.required],\n    town: ['', Validators.required],\n    estate: ['', Validators.required],\n    houseAddress: ['', Validators.required],\n  });\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: ShoppingCartService,\n    private router: Router\n  ) {}\n  public ngOnInit(): void {\n    this.getCartItems();\n    this.getCartTotal();\n  }\n  public generateCheckoutSummary() {\n    this.paymentDetails = this.paymentModeFormGroup.getRawValue();\n    this.addressDetails = this.addressFormGroup.getRawValue();\n  }\n\n  private getCartItems() {\n    this.cartItems = this.cartService.getCart();\n  }\n  private getCartTotal() {\n    this.cartTotal = this.cartService.getCartTotal();\n  }\n  public completeShopping() {\n    this.cartService.emptyCart();\n    this.router.navigate(['/appreciation']);\n  }\n}\n",
            "properties": [
                {
                    "name": "mobileNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "paymentMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-6295f5bbf876649f1e00ea2db75be083e023aa6ceb6331122a25f59be3a39d955c9c7b1c8f09192b8d453045b5c973db74bb72cd119bfc00ed2e5f40eb89a4dc",
            "file": "src/app/models/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product{\n    name: string;\n    id: number;\n    categoryId: number;\n    price: number;\n    inStock: number;\n    productImg: string;\n    rating: number;\n    subCategoryId: number;\n    description: string;\n}",
            "properties": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "inStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "productImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProductFilterParams",
            "id": "interface-ProductFilterParams-aea38a886aea30a79d6e8df841c8aeb09e9b2030a5a018bb68f5c6550d29f9ca540749d4cd0adf68c82fe61e4fa339364325072bbb70559ebe10cf62b113e43a",
            "file": "src/app/models/product-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProductFilterParams{\n    minPrice: number;\n    maxPrice: number;\n    rating: number;\n}",
            "properties": [
                {
                    "name": "maxPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "minPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SubCategory",
            "id": "interface-SubCategory-1df57118809a8ca8c662aadea4022ab7403975c9608726ebdba2d1aec18c7385ca7872fb8f98dece3c756689ef6ee83820e0408a6c9effeafbf7c188037714ee",
            "file": "src/app/models/sub-category.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SubCategory {\n  id?: string;\n  name: string;\n  description: string;\n  categoryId: number;\n}\n",
            "properties": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SuccessMessage",
            "id": "interface-SuccessMessage-c3e7c7e83b415a1f827d6846fbb2c6b536cb9f477a67ca8fb1be23f1fbbbcf6af0b29d43fea286d11d6521a910bd42316b90858a18594e563377a5fddb9ed3da",
            "file": "src/app/models/success-message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SuccessMessage{\n    message: string;\n}",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AlertService",
            "id": "injectable-AlertService-68482ceb90cbf84718c96b4d612f743621389e71067d1d18959d2d730df5b18b488bff28278bff150853cd20b0eaef1974bace573e13349a7dec4d80d5e17c50",
            "file": "src/app/services/shared/alert.service.ts",
            "properties": [
                {
                    "name": "alertsMessages$",
                    "defaultValue": "this.alertSub.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "alertSub",
                    "defaultValue": "new BehaviorSubject<SuccessMessage[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "alert",
                    "args": [
                        {
                            "name": "message",
                            "type": "SuccessMessage[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "SuccessMessage[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { SuccessMessage } from 'src/app/models/success-message';\n\n@Injectable()\nexport class AlertService {\n\n  private alertSub = new BehaviorSubject<SuccessMessage[]>([]);\n  alertsMessages$ = this.alertSub.asObservable();\n   \n  constructor() { }\n\n  alert(...message: SuccessMessage[]){\n     this.alertSub.next(message);\n  }\n  clearMessages(){\n    this.alertSub.next([]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-f296be5ae2c9fc77d5d9697fb878ed5506e495325355ddf3dee1c800f8d50a3d9bde57c8361061f9b2b2d938db133082a6230552cc4f4031e4b34214a651c5d6",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "backendBaseUrl",
                    "defaultValue": "nestBaseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "signedInUser$",
                    "defaultValue": "this.signedInUserSub.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "signedInUserSub",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSignedInUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSessionActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenObj",
                            "type": "LoginToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenObj",
                            "type": "LoginToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { nestBaseUrl } from '../../../environment';\n\n//models\n\nimport { LoginToken } from '../models/login-token';\nimport { CurrentUser } from '../models/current-user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private signedInUserSub = new Subject();\n  public signedInUser$ = this.signedInUserSub.asObservable();\n  private backendBaseUrl = nestBaseUrl;\n\n  constructor(private http: HttpClient) {}\n\n  isAuthorized(): boolean {\n    return this.isSessionActive();\n  }\n  getSignedInUser() {\n    const sessionActive = this.isSessionActive();\n    if (sessionActive) {\n      const user = localStorage.getItem('user') || null;\n      if (user) {\n        return JSON.parse(user);\n      }\n    } else {\n      return {};\n    }\n  }\n  getUserToken(): string {\n    const user: CurrentUser = this.getSignedInUser();\n    const userToken = user?.sessionToken?.access_token || '';\n    return userToken;\n  }\n  isSessionActive(): boolean {\n    const user = localStorage.getItem('user') || null;\n    if (user) {\n      const userObj: CurrentUser = JSON.parse(user);\n      const { token_expiration } = userObj.sessionToken;\n      const expirationTime = new Date(token_expiration);\n      const now = new Date();\n      const timeDiffinMs = now.getTime() - expirationTime.getTime();\n      if (timeDiffinMs < 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  signUp(email: string, password: string) {\n    const url = this.backendBaseUrl + '/auth/sign-up';\n    const payload = {\n      email,\n      password,\n    };\n    return this.http.post(url, payload);\n  }\n  login(email: string, password: string): Observable<any> {\n    const url = this.backendBaseUrl + '/auth/sign-in';\n    const payload = {\n      email,\n      password,\n    };\n    return this.http.post(url, payload);\n  }\n  setCurrentUser(email: string, tokenObj: LoginToken) {\n    const user: CurrentUser = {\n      email,\n      sessionToken: tokenObj,\n    };\n\n    localStorage.setItem('user', JSON.stringify(user));\n    this.signedInUserSub.next(user);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoryService",
            "id": "injectable-CategoryService-4c08c82399394521814477e693eb35f3be89ccfdec15e385918cd5cd871306868fb8b61c9f7b9aeff854fdc73830a205652c9059aab5cf2dced6e5b78dd1b9a4",
            "file": "src/app/services/category.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "payload",
                            "type": "CreateCategoryPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "CreateCategoryPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { filter, map } from 'rxjs';\n\nimport { firebaseDbUrl } from 'environment';\nimport { nestBaseUrl } from 'environment';\nimport { Observable } from 'rxjs';\nimport { Category, CreateCategoryPayload } from '../models/category';\n\n@Injectable()\nexport class CategoryService {\n\n  constructor(private http: HttpClient) { }\n\n  getAll(): Observable<any>{\n     const url = nestBaseUrl + '/category';\n     return this.http.get(url);\n  }\n  createCategory(payload: CreateCategoryPayload){\n        const url = nestBaseUrl + '/category';\n        return this.http.post(url, payload);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-02f285f372d9c9abb3be463ddfda13b3a323e5dd06917d053ebf7d8511941e67721949107cbbcf12623d23343ab699174d5eea072282c6b05473be5513931f06",
            "file": "src/app/services/shared/error.service.ts",
            "properties": [
                {
                    "name": "$errors",
                    "defaultValue": "this.errrorMsgsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorMessage[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "errrorMsgsSubject",
                    "defaultValue": "new BehaviorSubject(this.errorMessages)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNewErrorMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "ErrorMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "ErrorMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ErrorMessage } from '../../models/error-messages';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorService {\n\n  private errorMessages: ErrorMessage[] = [];\n  private errrorMsgsSubject = new BehaviorSubject(this.errorMessages);\n  public $errors = this.errrorMsgsSubject.asObservable();\n  \n\n  constructor() { }\n\n  setNewErrorMessage(error: ErrorMessage){\n      const newErrorMessages: ErrorMessage[] = [];\n      newErrorMessages.push(error);\n      this.errrorMsgsSubject.next(newErrorMessages);\n  }\n\n  resetErrorMessage(){\n      this.errorMessages = [];\n      this.errrorMsgsSubject.next(this.errorMessages);\n  }\n  handleError(error: any){\n    let errorMsg = {\n      message: ''\n    }\n    if(error?.status === 401){\n        errorMsg.message = 'Unauthorized: Please login again';\n    }\n\n    this.setNewErrorMessage(errorMsg);\n\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-8da2b2355bd0b2d176292680b1dcc06341c6006f5e7bc7cb33259fa26492395924488308abee73161f1ac6ba407d91104d732cedc0a4a460fa9e42c1e6e9d479",
            "file": "src/app/services/loader.service.ts",
            "properties": [
                {
                    "name": "loaderSubj",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loderObs$",
                    "defaultValue": "this.loaderSubj.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hideLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class LoaderService {\n\n  private loaderSubj = new Subject<boolean>();\n  public loderObs$ = this.loaderSubj.asObservable();\n\n  constructor() { }\n\n  public showLoader(){\n     this.loaderSubj.next(true);\n  }\n  public hideLoader(){\n     this.loaderSubj.next(false);\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ProductDetailsService",
            "id": "injectable-ProductDetailsService-8cd69b07ba45204aa232ee7cea98b340430369722dc549add88c3f2e529b8d191432a8657217c2436e54b68958198dd74c184f34bdaf6de6faf3a85732d43819",
            "file": "src/app/services/product-details.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { nestBaseUrl } from 'environment';\n\n@Injectable()\nexport class ProductDetailsService {\n  constructor(private http: HttpClient) {}\n\n  getProductById(productId: number): Observable<any> {\n    const url = nestBaseUrl + `/product/${productId}`;\n    return this.http.get(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-b7bee12e0a2aef79ad914f52b2e1fef5e3d789b45e87ba806c61e4c7a030b7de64e67cb2cda26ad9ea488a587ff15ec8c4c71d0d14567fda20cb3976f9d3bb69",
            "file": "src/app/services/products.service.ts",
            "properties": [
                {
                    "name": "productUrl",
                    "defaultValue": "nestBaseUrl + '/product'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductByCategoryId",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { Product } from '../models/product';\n\nimport { nestBaseUrl } from 'environment';\n\n@Injectable()\nexport class ProductsService {\n  public productUrl = nestBaseUrl + '/product';\n\n  constructor(private http: HttpClient) {}\n\n  getProductByCategoryId(categoryId: number): Observable<Product[]> {\n    const url = this.productUrl + `/category/${categoryId}`;\n    return this.http.get<Product[]>(url).pipe(\n      map((results: any) => {\n        const products: Product[] = Object.values(results);\n\n        return products;\n      })\n    );\n  }\n\n  createProduct(product: Partial<Product>): Observable<Product> {\n    const url = this.productUrl;\n    return this.http.post<Product>(url,product);\n  }\n\n  getProducts(): Observable<Product[]>{\n    const url = this.productUrl;\n    return this.http.get<Product[]>(url).pipe(\n      shareReplay()\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingCartService",
            "id": "injectable-ShoppingCartService-da3555b0f30af1c792fdecc6debec63f0f9a71a05fd9841387f7a53e9faa490abb40bde74290864b7ad55bf0d24d79130d5cec46af19ce56a49676b5c3b9e3d2",
            "file": "src/app/services/shopping-cart.service.ts",
            "properties": [
                {
                    "name": "cart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "itemsInCart",
                    "defaultValue": "new BehaviorSubject<number>(this.getCart().length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "itemsInCartObs$",
                    "defaultValue": "this.itemsInCart.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "no",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItemsToCart",
                    "args": [
                        {
                            "name": "item",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "CartItem[]",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartTotal",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItemsInCart",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCart",
                    "args": [
                        {
                            "name": "cart",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cart",
                            "type": "CartItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCart",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string | Error>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Product } from '../models/product';\nimport { Cart, CartItem } from '../models/shopping-cart';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShoppingCartService {\n  private itemsInCart = new BehaviorSubject<number>(this.getCart().length);\n  public itemsInCartObs$ = this.itemsInCart.asObservable();\n  public no = 0;\n  public cart!: CartItem[];\n\n  constructor() {}\n\n  getItemsInCart(): Observable<number> {\n    return this.itemsInCartObs$;\n  }\n  addItemsToCart(item: Product, quantity: number) {\n    const cart: CartItem[] = this.getCart();\n    cart.push({\n      productName: item.name,\n      productId: item.id,\n      unitPrice: item.price,\n      quantity: quantity,\n      totalPrice: 0,\n    });\n\n    this.setCart(cart);\n  }\n  getCart(): CartItem[] {\n    const cart = localStorage.getItem('cart') || null;\n    if (cart) {\n      return JSON.parse(cart);\n    } else {\n      return [];\n    }\n  }\n  setCart(cart: CartItem[]) {\n    localStorage.setItem('cart', JSON.stringify(cart));\n    this.cart = cart;\n    this.itemsInCart.next(this.cart.length);\n  }\n  updateCart(item: CartItem): Promise<string | Error> {\n    return new Promise((resolve, reject) => {\n      try {\n        const productId = item.productId;\n        const newCart = this.getCart();\n        const itemIndex = newCart.findIndex((cartItem: CartItem) => {\n          return cartItem.productId === productId;\n        });\n\n        if (itemIndex >= 0) {\n          newCart[itemIndex] = item;\n        }\n\n        this.setCart(newCart);\n        resolve('Cart has been updated successfully');\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  getCartTotal(): number{\n     const cart = this.getCart();\n     if (cart.length === 0) return 1;\n     return cart.map((t:CartItem) => t.unitPrice * t.quantity).reduce((acc, value) => acc + value, 0);\n  }\n  emptyCart(){\n    localStorage.removeItem('cart');\n    const cart = this.getCart();\n    this.cart = cart;\n    this.itemsInCart.next(cart.length);\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "type": "injectable"
        },
        {
            "name": "SubCategoryService",
            "id": "injectable-SubCategoryService-257e7914c0a71e90a75c4491a0c425498277e0c3fef4a6cf43533a5e9874070c38121f57534253a34875bea00638c5dcc6936cd905fb06550b22764f873f56c8",
            "file": "src/app/services/sub-category.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "nestBaseUrl + '/sub-category'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createSubCategory",
                    "args": [
                        {
                            "name": "createSubCategoryPayload",
                            "type": "SubCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createSubCategoryPayload",
                            "type": "SubCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllSubCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SubCategory[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSubCategoriesByCategoryId",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { nestBaseUrl } from 'environment';\nimport { SubCategory } from '../models/sub-category';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Category } from '../models/category';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubCategoryService {\n  private url = nestBaseUrl + '/sub-category';\n\n  constructor(private http: HttpClient) {}\n\n  getAllSubCategories(): Observable<SubCategory[]> {\n    return this.http.get<SubCategory[]>(this.url);\n  }\n\n  createSubCategory(\n    createSubCategoryPayload: SubCategory\n  ): Observable<Category> {\n    return this.http.post<SubCategory>(this.url, createSubCategoryPayload);\n  }\n  getSubCategoriesByCategoryId(categoryId: string) {\n    const subUrl = this.url + `/category/${categoryId}`;\n    return this.http.get<SubCategory[]>(subUrl);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-c2bc887ee6cad55f4daa05352bcb5c605b48069d25aef575f89d81cd090efd558cfee241de1bd06e1a4a3d4bd0acf6325830498c938de5211ab028b83da5499d",
            "file": "src/app/services/auth-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | UrlTree",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport  {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree} from '@angular/router';\n\nimport { AuthService } from './auth.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree{\n    const isAuthorized =  this.authService.isAuthorized();\n    if(isAuthorized){\n        return true;\n    }else{\n      // Redirect to the login page\n      return this.router.parseUrl('/login');\n    }\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptorService",
            "id": "injectable-TokenInterceptorService-bbe0b36ce83bd60852e90584e5fec3113f49352b46615048f96a60cf8b30947dbc1efa5b702764dee1ba84ec413990a6e67bb5af1081ed3d80fd895d7911b08a",
            "file": "src/app/services/interceptors/token-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const userToken = this.authService.getUserToken();\n    if (userToken.length) {\n      req = req.clone({\n        setHeaders: {\n          Authorization : `Bearer ${userToken}`\n        },\n      });\n    }\n    return next.handle(req);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-58dd55092ebd7eca5829cf19709e02884a87c675f77897e8bf9838f7614b555317a348b0f5347388caeefa5632f8d762bea040dfd048200c1c993824658c4544",
            "file": "src/app/admin-dashboard/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin",
            "styleUrls": [
                "./admin.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements  OnInit{\n   constructor(){\n\n   }\n\n   ngOnInit(): void {\n   }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".admin-dawer-container{\n    width: 100%;\n    background-color: #FFF;\n}\n.admin-side-nav{\n    width: 200px;\n    padding-left: 20px;\n}\n.sidenav-link{\n    text-decoration: none;\n}",
                    "styleUrl": "./admin.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navbar></app-navbar>\n<mat-drawer-container class=\"admin-dawer-container\">\n  <mat-drawer mode=\"side\" opened class=\"admin-side-nav\">\n    <mat-list role=\"list\">\n      <mat-list-item role=\"listitem\">\n        <a [routerLink]=\"['category']\" class=\"sidenav-link\">Categories</a>\n      </mat-list-item>\n      <mat-list-item role=\"listitem\">\n        <a [routerLink]=\"['sub-category']\" class=\"sidenav-link\"\n          >Sub Categories</a\n        >\n      </mat-list-item>\n      <mat-list-item role=\"listitem\">\n        <a [routerLink]=\"['product']\" class=\"sidenav-link\">Products</a>\n      </mat-list-item>\n    </mat-list>\n  </mat-drawer>\n  <mat-drawer-content>\n    <app-alert></app-alert>\n    <router-outlet></router-outlet>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "AdminProductComponent",
            "id": "component-AdminProductComponent-f7fcc6a58882e43bb7140535d709f6ffd955bdefe15b346bfa869e337129263251c875abd9633e892547a6a6ae4f7192ce9aab5ec587294f4db3dfa7c0f48aee",
            "file": "src/app/admin-dashboard/product/product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-product",
            "styleUrls": [
                "./product.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class AdminProductComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-product-grid-container{\n    display: grid;\n    grid-template-columns: auto;\n    padding-left: 5%;\n    padding-right: 5%;\n}\n\nmat-form-field{\n    width: 100%;\n}\n\n.create-product-form{\n    text-align: center;\n    padding-top: 100px;\n    padding-left: 30%;\n    padding-right: 30%;;\n}",
                    "styleUrl": "./product.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"create-product-grid-container\">\n  <div class=\"create-product-grid\">\n    <mat-tab-group>\n      <mat-tab label=\"Create Product\">\n        <div class=\"create-product-form\">\n          <h2>Add Product</h2>\n          <app-create-product></app-create-product>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Products\"> \n        <app-admin-product-list></app-admin-product-list>\n      </mat-tab>\n    </mat-tab-group>\n  </div>\n</div>\n"
        },
        {
            "name": "AdminProductListComponent",
            "id": "component-AdminProductListComponent-2af6910ded7fe0cfbb75386543f627820a69173ebf91fdad960af2cd7e72ba3206abf7cf2aeed47006cfd11bd9fa56641a6960b1587ae38b491bafe07e989dae",
            "file": "src/app/admin-dashboard/product/admin-product-list/admin-product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-product-list",
            "styleUrls": [
                "./admin-product-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnDefs",
                    "defaultValue": "[\n      {\n        columnDef: 'id',\n        headerCellDef: 'No',\n        matCellDef: 'id'\n      },\n      {\n        columnDef: 'name',\n        headerCellDef: 'Name',\n        matCellDef: 'name'\n      },\n      {\n        columnDef: 'price',\n        headerCellDef: 'Price',\n        matCellDef: 'price'\n      },\n      {\n        columnDef: 'inStock',\n        headerCellDef: 'In Stock',\n        matCellDef: 'inStock'\n      }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnDefs[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name' ,'price', 'inStock']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "products$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "title",
                    "defaultValue": "'Product List'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { ProductsService } from 'src/app/services/products.service';\nimport { Product } from '../../../models/product';\nimport { ColumnDefs } from 'src/app/models/table-list';\n\n@Component({\n  selector: 'app-admin-product-list',\n  templateUrl: './admin-product-list.component.html',\n  styleUrls: ['./admin-product-list.component.css']\n})\nexport class AdminProductListComponent  implements OnInit{\n\n    public title = 'Product List';\n    public displayedColumns: string[] = ['id', 'name' ,'price', 'inStock'];\n\n    public columnDefs: ColumnDefs[] = [\n      {\n        columnDef: 'id',\n        headerCellDef: 'No',\n        matCellDef: 'id'\n      },\n      {\n        columnDef: 'name',\n        headerCellDef: 'Name',\n        matCellDef: 'name'\n      },\n      {\n        columnDef: 'price',\n        headerCellDef: 'Price',\n        matCellDef: 'price'\n      },\n      {\n        columnDef: 'inStock',\n        headerCellDef: 'In Stock',\n        matCellDef: 'inStock'\n      }\n    ];\n\n     products$: Observable<Product[]> = of([]);\n     constructor(private productsService: ProductsService){\n     }\n\n     ngOnInit(): void {\n       this.products$ = this.productsService.getProducts();\n     }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./admin-product-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-table-list \n[title]=\"title\"\n[dataSource]=\"(products$ | async)\"\n[columnDefs]=\"columnDefs\"\n[displayedColumns]=\"displayedColumns\"\n></app-table-list>"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-ec12660d5af2f52395050755870db1d3d004bd77578aabf1f3529269607f9297a1829b50179db794bbc05ed89074ea4c99f31e6163ef2e009965599eede7bdd7",
            "file": "src/app/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SuccessMessage[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Observable} from 'rxjs';\nimport { SuccessMessage } from '../models/success-message';\nimport { AlertService } from '../services/shared/alert.service';\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.css']\n})\nexport class AlertComponent {\n\n  messages$!: Observable<SuccessMessage[]>;\n\n  constructor(private alertService: AlertService){\n    this.messages$ = this.alertService.alertsMessages$;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".message-list{\n    width: 40%;\n    margin-left: 30%;\n    padding-top: 6%;\n    position: absolute;\n}\n.message-item{\n    color: #155724;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    text-align: center;\n}",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"(messages$ | async) as messages\">\n<mat-list class=\"message-list\" *ngIf=\"messages.length > 0\">\n    <mat-list-item *ngFor=\"let message of messages; index as i\" class=\"message-item\">{{message.message}}</mat-list-item>\n</mat-list>\n</ng-container>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a2d136d2ec77f033a48b7bd906702604c78559827d1f32825a4bc2510cbc1892b85cb1559ccefd099a2ef443d1ace970a1101a5c6a71ba1d706173f289c55559",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ng-ecommerce'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ng-ecommerce';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-error></app-error>\n<app-loader></app-loader>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "AppreciationComponent",
            "id": "component-AppreciationComponent-a60398a9fb5d9ced59e552072e3722334482d33a299b3745cf10f7a4fb3718ff4dfa01d6c0988bf5a507af4690ff242993b1686282da8896ff66d6e77f028921",
            "file": "src/app/appreciation/appreciation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-appreciation",
            "styleUrls": [
                "./appreciation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./appreciation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-appreciation',\n  templateUrl: './appreciation.component.html',\n  styleUrls: ['./appreciation.component.css']\n})\nexport class AppreciationComponent {\n\n  constructor(private router: Router){\n\n  }\n\n  public navigateToHome(){\n     this.router.navigate(['/']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".appreciation-list{\n    width: 40%;\n    margin-left: 30%;\n    margin-top: 30%;\n\n}\n.appreciation-item{\n    color: #0f5132;\n    text-align: center;\n}",
                    "styleUrl": "./appreciation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-list class=\"appreciation-list\">\n    <mat-list-item  class=\"appreciation-item\">\n        Thanks you for shopping with us. We appreciate you.\n        <button mat-button mat-raised-button color=\"primary\" (click)=\"navigateToHome()\">Continue Shopping</button>\n    </mat-list-item>\n</mat-list>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CategoryComponent",
            "id": "component-CategoryComponent-229dfc533dd317057981add599d48220934ba88de8bdffc9b03be62adecd5983f5647e455e32c1177e155f1ef28b35f5401a43134ff4c3b74abdf5e66e436300",
            "file": "src/app/category/category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category",
            "styleUrls": [
                "./category.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "goToCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n\nimport { CategoryService } from '../services/category.service';\nimport { LoaderService } from '../services/loader.service';\nimport { ErrorService } from '../services/shared/error.service';\n\ninterface Category{\n  name: string;\n  featureImg: string;\n  id: number;\n}\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.css']\n})\nexport class CategoryComponent implements OnInit{\n\n  public categories: Category[] = [];\n\n  constructor(private categoryService: CategoryService, \n    private router: Router,\n    private loaderService: LoaderService,\n    private errorService: ErrorService){\n\n  }\n\n  public ngOnInit(): void {\n    this.getCategories();\n  }\n\n  public getCategories(){\n     this.showLoader();\n     this.categoryService.getAll().subscribe((categories: any)=> {\n         this.categories = categories;\n         this.hideLoader();\n     },(error: Error)=> {\n        this.errorService.handleError(error);\n        this.hideLoader();\n     });\n  }\n\n  public goToCategory(categoryId: number){\n     this.router.navigate([`/category/${categoryId}`]);\n  }\n  public showLoader(){\n    this.loaderService.showLoader();\n  }\n  public hideLoader(){\n     this.loaderService.hideLoader();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".category-content{\n    margin-top: 50px;\n    background-color: #FFF;\n}\n.category-divider{\n    text-align: center;\n    width:60%;\n    margin-left: 20%;\n    padding-bottom: 10px;\n}\n.category-title{\n    text-align: center;\n}\n.grid-container{\n    display: grid;\n    grid-template-columns: auto auto auto auto;\n    justify-content: center;\n\n}\n\n.category-card{\n    height: 400px;\n    width: 80%;\n    box-shadow: none;\n}\n.category-card:hover{\n    cursor: pointer;\n}\n.category-card img{\n    height: 60%;\n    width: auto;\n    margin-left: 5px;\n}\n.title-divider{\n    width: 30%;\n}\n.section-title{\n    text-align: left;\n}\n\n@media (max-width: 1020px) {\n    .grid-container{\n        grid-template-columns: auto auto;\n    }\n}\n\n@media (max-width: 600px) {\n    .grid-container{\n        grid-template-columns: auto;\n    }\n}",
                    "styleUrl": "./category.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"category-content\">\n<h2 class=\"category-title\">Categories</h2>\n  <div class=\"grid-container\">\n    <div class=\"grid-item\" *ngFor=\"let category of categories; index as i\">\n        <mat-card\n              class=\"category-card\" \n              (click)=\"goToCategory(category.id)\">\n            <mat-card-header>\n              <mat-card-title>{{category.name}}</mat-card-title>\n            </mat-card-header>\n            <img mat-card-image src=\"/assets/images/{{category.featureImg}}\" alt={{category.name}} />\n          </mat-card>\n    </div>\n     \n  </div>\n</div>\n\n\n  "
        },
        {
            "name": "CategoryListComponent",
            "id": "component-CategoryListComponent-f19b16050132697b94f3bf625ecc26a8936ae5966f22d4b946360bdcac967bafa2d1e69185ce62dcc2aa5134a4a34b6738d9db74feb1b10d3243518f3f13df76",
            "file": "src/app/admin-dashboard/category/category-list/category-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-list",
            "styleUrls": [
                "./category-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./category-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'description' ,'featureImg', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAllCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CategoryService } from '../../../services/category.service';\nimport { Category } from '../../../models/category';\n\n@Component({\n  selector: 'app-category-list',\n  templateUrl: './category-list.component.html',\n  styleUrls: ['./category-list.component.css']\n})\nexport class CategoryListComponent implements OnInit {\n\n  public categoryList: Category[] = [];\n  public displayedColumns: string[] = ['id', 'name', 'description' ,'featureImg', 'action'];\n\n  constructor(private categoryService: CategoryService){\n\n  }\n\n  ngOnInit(): void {\n    this.getAllCategories();\n  }\n\n  getAllCategories(){\n     this.categoryService.getAll().subscribe((result: any)=> {\n        this.categoryList = result;\n     });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".action-btn{\n    margin-left: 5px;\n}",
                    "styleUrl": "./category-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<table mat-table [dataSource]=\"categoryList\" class=\"mat-elevation-z8\">\n  \n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n  \n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n        <th mat-header-cell *matHeaderCellDef> Description </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n      </ng-container>\n  \n    <ng-container matColumnDef=\"featureImg\">\n      <th mat-header-cell *matHeaderCellDef> Image </th>\n      <td mat-cell *matCellDef=\"let element\"></td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef> Action </th>\n        <td mat-cell *matCellDef=\"let element\">\n            <button \n            class=\"action-btn\"\n            mat-button \n            mat-raised-button\n            color=\"primary\">\n            Edit\n         </button>\n         <span></span>\n         <button \n         class=\"action-btn\"\n            mat-button \n            mat-raised-button\n            color=\"warn\" >\n            Delete\n         </button>\n        </td>\n      </ng-container>\n\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>"
        },
        {
            "name": "CheckoutComponent",
            "id": "component-CheckoutComponent-1cadbf6ed485547a1f8524b850af64a9715dda223eedb6fc70c8b9e972f59c52d0cfba99ac3225b7a5a813dc6b40433d21a41d4e5711e4a2cfadb219abce1947",
            "file": "src/app/checkout/checkout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkout",
            "styleUrls": [
                "./checkout.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressDetails",
                    "defaultValue": "{\n    county: '',\n    town: '',\n    estate: '',\n    houseAddress: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "addressFormGroup",
                    "defaultValue": "this.formBuilder.group({\n    county: ['', Validators.required],\n    town: ['', Validators.required],\n    estate: ['', Validators.required],\n    houseAddress: ['', Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "paymentDetails",
                    "defaultValue": "{\n    paymentMode: '',\n    mobileNo: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Payment",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "paymentMode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "paymentModeFormGroup",
                    "defaultValue": "this.formBuilder.group({\n    paymentMode: ['', Validators.required],\n    mobileNo: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "completeShopping",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateCheckoutSummary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCartItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCartTotal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { CartItem } from '../models/shopping-cart';\nimport { ShoppingCartService } from '../services/shopping-cart.service';\n\ninterface Payment {\n  paymentMode: string | null;\n  mobileNo: string | null;\n}\n\ninterface Address {\n  county: string | null;\n  town: string | null;\n  estate: string | null;\n  houseAddress: string | null;\n}\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css'],\n})\nexport class CheckoutComponent implements OnInit {\n  public paymentMode: string = '';\n  public paymentDetails: Payment = {\n    paymentMode: '',\n    mobileNo: '',\n  };\n  public addressDetails: Address = {\n    county: '',\n    town: '',\n    estate: '',\n    houseAddress: '',\n  };\n  public cartItems: CartItem[] = [];\n  public cartTotal = 0;\n\n  paymentModeFormGroup = this.formBuilder.group({\n    paymentMode: ['', Validators.required],\n    mobileNo: [''],\n  });\n  addressFormGroup = this.formBuilder.group({\n    county: ['', Validators.required],\n    town: ['', Validators.required],\n    estate: ['', Validators.required],\n    houseAddress: ['', Validators.required],\n  });\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: ShoppingCartService,\n    private router: Router\n  ) {}\n  public ngOnInit(): void {\n    this.getCartItems();\n    this.getCartTotal();\n  }\n  public generateCheckoutSummary() {\n    this.paymentDetails = this.paymentModeFormGroup.getRawValue();\n    this.addressDetails = this.addressFormGroup.getRawValue();\n  }\n\n  private getCartItems() {\n    this.cartItems = this.cartService.getCart();\n  }\n  private getCartTotal() {\n    this.cartTotal = this.cartService.getCartTotal();\n  }\n  public completeShopping() {\n    this.cartService.emptyCart();\n    this.router.navigate(['/appreciation']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".checkout-grid-container{\n    display: grid;\n    grid-template-columns: 60%;\n    margin-left: 25%;\n}\n.checkout-title{\n    text-align: center;\n}\nmat-form-field{\n    width: 51%;\n}\n.checkout-navigation button{\n  margin-left: 5px;\n}",
                    "styleUrl": "./checkout.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"checkout-grid-container\">\n    <div class=\"checkout-grid\">\n        <h2 class=\"checkout-title\">Checkout</h2>\n        <mat-stepper [linear]=\"true\" #stepper>\n            <mat-step [stepControl]=\"paymentModeFormGroup\">\n              <form [formGroup]=\"paymentModeFormGroup\">\n                <ng-template matStepLabel>Payment Mode</ng-template>\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Payment Mode</mat-label>\n                    <mat-select formControlName=\"paymentMode\" [(ngModel)]=\"paymentMode\">\n                      <mat-option value=\"mpesa\">MPESA</mat-option>\n                      <mat-option value=\"visa\">VISA</mat-option>\n                      <mat-option value=\"airtel-money\">Airtel Money</mat-option>\n                      <mat-option value=\"cod\">Cash on Delivery</mat-option>\n                      <mat-option value=\"mod\">Mpesa on Delivery</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field appearance=\"fill\" *ngIf=\"paymentMode === 'mpesa' || paymentMode === 'airtel-money'\">\n                    <mat-label>Mobile No</mat-label>\n                    <input matInput formControlName=\"mobileNo\" placeholder=\"0725123456\"\n                           required>\n                </mat-form-field>\n                <div>\n                  <button mat-button mat-raised-button color=\"primary\" matStepperNext>Next</button>\n                </div>\n              </form>\n            </mat-step>\n            <mat-step [stepControl]=\"addressFormGroup\" label=\"Fill out your Delivery address\">\n              <form [formGroup]=\"addressFormGroup\">\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>County</mat-label>\n                    <mat-select formControlName=\"county\">\n                      <mat-option value=\"nairobi\">Nairobi</mat-option>\n                      <mat-option value=\"ug\">Uasin Gishu</mat-option>\n                      <mat-option value=\"kisumu\">Kisumu</mat-option>\n                      <mat-option value=\"msa\">Mombasa</mat-option>\n                      <mat-option value=\"nakuru\">Nakuru</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Town</mat-label>\n                    <input matInput formControlName=\"town\" placeholder=\"Eldoret, Nairobi\"\n                           required>\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\">\n                    <mat-label>Estate</mat-label>\n                    <input matInput formControlName=\"estate\" placeholder=\"Ex. 1 Main St, New York, NY\"\n                           required>\n                  </mat-form-field>\n                <mat-form-field appearance=\"fill\">\n                  <mat-label>House Address</mat-label>\n                  <input matInput formControlName=\"houseAddress\" placeholder=\"Ex. 1 Main St, New York, NY\"\n                         required>\n                </mat-form-field>\n                <div class=\"checkout-navigation\">\n                  <button mat-button matStepperPrevious mat-raised-button color=\"accent\">Back</button>\n                  <button mat-button mat-raised-button color=\"primary\" matStepperNext (click)=\"generateCheckoutSummary()\">Next</button>\n                </div>\n              </form>\n            </mat-step>\n            <mat-step>\n              <ng-template matStepLabel>Confirm Details</ng-template>\n              <div class=\"payment-mode-details\">\n                <h3>Shopping Details</h3>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\" *ngFor=\"let item of cartItems\">{{item.productName}} : Sh {{item.quantity * item.unitPrice}}</mat-list-item>\n                    <mat-list-item role=\"listitem\">Total Cost : {{cartTotal}}</mat-list-item>\n                  </mat-list>\n                <h3>Payment Details</h3>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\">Payment Mode: {{paymentDetails.paymentMode}}</mat-list-item>\n                    <mat-list-item role=\"listitem\">Mobile No: {{paymentDetails.mobileNo}}</mat-list-item>\n                  </mat-list>\n\n                  <h3>Address Details</h3>\n                  <mat-list role=\"list\">\n                      <mat-list-item role=\"listitem\">County : {{addressDetails.county}}</mat-list-item>\n                      <mat-list-item role=\"listitem\">Town : {{addressDetails.town}}</mat-list-item>\n                      <mat-list-item role=\"listitem\">Estate : {{addressDetails.estate}}</mat-list-item>\n                      <mat-list-item role=\"listitem\">House Address : {{addressDetails.houseAddress}}</mat-list-item>\n                    </mat-list>\n                  \n              </div>\n              <div class=\"checkout-navigation\">\n                <button mat-button mat-raised-button matStepperPrevious  color=\"accent\">Back</button>\n                <button mat-button mat-raised-button color=\"warn\" (click)=\"stepper.reset()\">Reset</button>\n                <button mat-button mat-raised-button color=\"primary\" (click)=\"completeShopping()\">Finish</button>\n              </div>\n            </mat-step>\n          </mat-stepper>\n\n    </div>\n</div>\n"
        },
        {
            "name": "CreateCategoryComponent",
            "id": "component-CreateCategoryComponent-f14fb633d6ea61d1f4b3913ffa32c9aaf72f68d75631e1bbf7ab6580b09a79feca90ee6dab6641777c1b1868cab2b494f28aa68a929329422f1c0c0c65cb7729",
            "file": "src/app/admin-dashboard/category/create-category/create-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-category",
            "styleUrls": [
                "./create-category.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createCategoryForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl<string>(''),\n    description: new FormControl<string>(''),\n    featureImg: new FormControl<string>(''),\n    file: new FormControl<any | null>(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitCategoryData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { CategoryService } from 'src/app/services/category.service';\n\nimport { CreateCategoryPayload } from '../../../models/category';\n\n@Component({\n  selector: 'app-create-category',\n  templateUrl: './create-category.component.html',\n  styleUrls: ['./create-category.component.css'],\n})\nexport class CreateCategoryComponent implements OnInit {\n  createCategoryForm = new FormGroup({\n    name: new FormControl<string>(''),\n    description: new FormControl<string>(''),\n    featureImg: new FormControl<string>(''),\n    file: new FormControl<any | null>(''),\n  });\n\n  constructor(private categoryService: CategoryService) {}\n\n  ngOnInit(): void {}\n\n  onFileChange($event: any) {\n    if ($event.target.files.length) {\n      const file = $event.target.files[0] || '';\n\n      this.createCategoryForm.patchValue({\n        file: file,\n      });\n    }\n  }\n\n  submitCategoryData() {\n    const payload =\n      this.createCategoryForm.getRawValue() as unknown as CreateCategoryPayload;\n\n    const formData: any = new FormData();\n    formData.append('name', this.createCategoryForm.get('name')?.value);\n    formData.append(\n      'description',\n      this.createCategoryForm.get('description')?.value\n    );\n    formData.append('file', this.createCategoryForm.get('file')?.value);\n\n    this.categoryService.createCategory(formData).subscribe(\n      (result: any) => {\n        console.log('result', result);\n      },\n      (error) => {\n        console.log('error', error);\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-category-grid-container{\n    display: grid;\n    grid-template-columns: auto;\n    padding-left: 5%;\n    padding-right: 5%;\n}\n\nmat-form-field{\n    width: 100%;\n}\n\n.create-category-form{\n    text-align: center;\n    padding-top: 100px;\n    padding-left: 30%;\n    padding-right: 30%;;\n}",
                    "styleUrl": "./create-category.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-category-grid-container\">\n  <div class=\"create-category-grid\">\n    <mat-tab-group>\n      <mat-tab label=\"Create Category\">\n        <div class=\"create-category-form\">\n          <h2>Create Category</h2>\n          <form [formGroup]=\"createCategoryForm\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Name : </mat-label>\n              <input matInput formControlName=\"name\" type=\"text\" />\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Description</mat-label>\n              <textarea matInput formControlName=\"description\"></textarea>\n            </mat-form-field>\n            Feature Image :\n            <input\n              type=\"file\"\n              formControlName=\"featureImg\"\n              (change)=\"onFileChange($event)\"\n            />\n            <button\n              mat-button\n              mat-raised-button\n              color=\"primary\"\n              (click)=\"submitCategoryData()\"\n            >\n              Create\n            </button>\n          </form>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Categories\">\n        <app-category-list></app-category-list>\n      </mat-tab>\n    </mat-tab-group>\n  </div>\n</div>\n"
        },
        {
            "name": "CreateProductComponent",
            "id": "component-CreateProductComponent-f1a02f5e68482f7985ad6fb6e776238bc8ba9d5b2b1e390c244ecc4675dbc738b44c3f3f8cfe22faf8e44905ad5f60ebc97964a2eca8d99ced3463d4722c3ccd",
            "file": "src/app/admin-dashboard/product/create-product/create-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-product",
            "styleUrls": [
                "./create-product.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Category[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "createProductForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl<string>('', { nonNullable: true }),\n    description: new FormControl<string>('', { nonNullable: true }),\n    categoryId: new FormControl<number>(0, { nonNullable: true }),\n    subCategoryId: new FormControl<number>(0, { nonNullable: true }),\n    price: new FormControl<number>(0, { nonNullable: true }),\n    inStock: new FormControl<number>(0, { nonNullable: true }),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subCategories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubCategory[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCategorySelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { Category } from '../../../models/category';\nimport { SubCategory } from '../../../models/sub-category';\nimport { CategoryService } from '../../../services/category.service';\nimport { SubCategoryService } from '../../../services/sub-category.service';\nimport { ProductsService } from 'src/app/services/products.service';\nimport { Product } from '../../../models/product';\nimport { AlertService } from 'src/app/services/shared/alert.service';\n\n@Component({\n  selector: 'app-create-product',\n  templateUrl: './create-product.component.html',\n  styleUrls: ['./create-product.component.css'],\n})\nexport class CreateProductComponent implements OnInit {\n  categories$!: Observable<Category[]>;\n  subCategories$!: Observable<SubCategory[]>;\n\n  public createProductForm = new FormGroup({\n    name: new FormControl<string>('', { nonNullable: true }),\n    description: new FormControl<string>('', { nonNullable: true }),\n    categoryId: new FormControl<number>(0, { nonNullable: true }),\n    subCategoryId: new FormControl<number>(0, { nonNullable: true }),\n    price: new FormControl<number>(0, { nonNullable: true }),\n    inStock: new FormControl<number>(0, { nonNullable: true }),\n  });\n\n  constructor(\n    private categoryService: CategoryService,\n    private subCategoryService: SubCategoryService,\n    private productsService: ProductsService,\n    private alertService: AlertService\n  ) {}\n\n  ngOnInit(): void {\n    this.getCategories();\n  }\n\n  getCategories() {\n    this.categories$ = this.categoryService.getAll();\n  }\n  onCategorySelect() {\n    const categoryId = this.createProductForm.get('categoryId')?.value;\n    if (categoryId) {\n      this.subCategories$ =\n        this.subCategoryService.getSubCategoriesByCategoryId(\n          categoryId.toString()\n        );\n    }\n  }\n  submitData() {\n    const formData = this.createProductForm.value;\n    const payLoad: Partial<Product> = {\n      name: formData?.name || '',\n      description: formData.description || '',\n      subCategoryId: parseInt(formData.subCategoryId as unknown as string),\n      price: formData.price ? formData.price : 0,\n      inStock: formData.inStock ? formData.inStock : 0,\n    };\n    this.productsService.createProduct(payLoad).subscribe((result) => {\n      const message = 'Product Succesfully Created';\n      this.alertService.alert({\n        message\n      });\n      this.createProductForm.reset();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-product-form{\n    text-align: center;\n}\nmat-form-field{\n    width: 100%;\n}",
                    "styleUrl": "./create-product.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-product-form\">\n  <form [formGroup]=\"createProductForm\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Name : </mat-label>\n      <input matInput formControlName=\"name\" type=\"text\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Category</mat-label>\n      <mat-select\n        formControlName=\"categoryId\"\n        (selectionChange)=\"onCategorySelect()\"\n      >\n        <mat-option\n          value=\"{{ category.id }}\"\n          *ngFor=\"let category of categories$ | async\"\n          >{{ category.name }}</mat-option\n        >\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Sub Category</mat-label>\n      <mat-select formControlName=\"subCategoryId\">\n        <mat-option\n          value=\"{{ subCategory.id }}\"\n          *ngFor=\"let subCategory of subCategories$ | async\"\n          >{{ subCategory.name }}</mat-option\n        >\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Price : </mat-label>\n      <input matInput formControlName=\"price\" type=\"number\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>In Stock : </mat-label>\n      <input matInput formControlName=\"inStock\" type=\"number\" />\n    </mat-form-field>\n    <button mat-button mat-raised-button color=\"primary\" (click)=\"submitData()\">\n      Create\n    </button>\n  </form>\n</div>\n"
        },
        {
            "name": "CreateSubCategoryComponent",
            "id": "component-CreateSubCategoryComponent-be7384d3c6a0f4e2fc73326f568150f4015d5be8d9f82c03072052def64efff36f6cf50d1ec5f177de868b8d9a2cd09bfc3c5229234aa546b432247f989b63ab",
            "file": "src/app/admin-dashboard/sub-categories/create-sub-category/create-sub-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-sub-category",
            "styleUrls": [
                "./create-sub-category.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-sub-category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Category[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createSubCategoryForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl<string>('', { nonNullable: true }),\n    description: new FormControl<string>('', { nonNullable: true }),\n    categoryId: new FormControl<number>(0, { nonNullable: true }),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable, tap } from 'rxjs';\nimport { Category } from '../../../models/category';\nimport { CategoryService } from 'src/app/services/category.service';\nimport { SubCategoryService } from 'src/app/services/sub-category.service';\nimport { SubCategory } from '../../../models/sub-category';\n\n@Component({\n  selector: 'app-create-sub-category',\n  templateUrl: './create-sub-category.component.html',\n  styleUrls: ['./create-sub-category.component.css'],\n})\nexport class CreateSubCategoryComponent implements OnInit {\n  public categories$!: Observable<Category[]>;\n\n  public createSubCategoryForm = new FormGroup({\n    name: new FormControl<string>('', { nonNullable: true }),\n    description: new FormControl<string>('', { nonNullable: true }),\n    categoryId: new FormControl<number>(0, { nonNullable: true }),\n  });\n\n  constructor(\n    private categoryService: CategoryService,\n    private subCategoryService: SubCategoryService\n  ) {}\n\n  ngOnInit(): void {\n    this.getCategories();\n  }\n\n  getCategories() {\n    this.categories$ = this.categoryService\n      .getAll();\n  }\n\n  public submitData() {\n    const formData = this.createSubCategoryForm.value;\n    const payLoad: SubCategory = {\n      name: formData?.name || '',\n      description: formData?.description || '',\n      categoryId: formData?.categoryId || 0,\n    };\n\n    this.subCategoryService\n      .createSubCategory(payLoad)\n      .subscribe((response: any) => {\n        this.createSubCategoryForm.reset();\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-sub-category-form{\n    text-align: center;\n}\nmat-form-field{\n    width: 100%;\n}",
                    "styleUrl": "./create-sub-category.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"create-sub-category-form\">\n  <form [formGroup]=\"createSubCategoryForm\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Name : </mat-label>\n      <input matInput formControlName=\"name\" type=\"text\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Category</mat-label>\n      <mat-select formControlName=\"categoryId\">\n        <mat-option\n          value=\"{{ category.id }}\"\n          *ngFor=\"let category of categories$ | async\"\n          >{{ category.name }}</mat-option\n        >\n      </mat-select>\n    </mat-form-field>\n    <button mat-button mat-raised-button color=\"primary\" (click)=\"submitData()\">\n      Create\n    </button>\n  </form>\n</div>\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-77badab8cec2aefea221253ee813c7cda539f78a0e614ab1a8e58425ef00228b64c6f11b12d9ea32ad35496fa15a189e1140a1bc785ed197236b9a3e6ba015f4",
            "file": "src/app/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error",
            "styleUrls": [
                "./error.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorMessage[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { ErrorMessage } from '../models/error-messages';\n\nimport { ErrorService } from '../services/shared/error.service';\n\n\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n  \n  public errors: ErrorMessage[] = [];\n\n  constructor(private errorService: ErrorService){\n\n  }\n\n  public ngOnInit(): void {\n     this.errorService.$errors.subscribe((errors: ErrorMessage[])=> {\n         this.errors = errors;\n\n     })\n  }\n  \n\n  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error-list{\n    width: 40%;\n    margin-left: 30%;\n    padding-top: 30px;\n    position: absolute;\n}\n.error-item{\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    text-align: center;\n}",
                    "styleUrl": "./error.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-list class=\"error-list\" *ngIf=\"errors.length > 0\">\n    <mat-list-item *ngFor=\"let error of errors; index as i\" class=\"error-item\">{{error.message}}</mat-list-item>\n</mat-list>\n  "
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-f14059b400b56885f27f6e6187937810546ccef26ee9f09ce8c6097607ce068819ab1dfff12838de8364957bf2175509147b64e8c97bae64355d49737f770c0d",
            "file": "src/app/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [
                "./landing.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.css']\n})\nexport class LandingComponent implements OnInit{\n    constructor(){\n\n    }\n\n    public ngOnInit(): void {\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-main-banner></app-main-banner>\n<app-category></app-category>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-fe7fed72ddc4201c92000ccd81dc6742439071cfb00682b8779a301872800c5b130e9a023dedb6a50c46ebd09655a4e7b9ac754306a87d6fe5c26bb95d5745fd",
            "file": "src/app/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subScribeToLoaderService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { LoaderService } from '../services/loader.service';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css']\n})\nexport class LoaderComponent implements OnInit {\n\n  public showLoader = false;\n\n  constructor(private loaderService: LoaderService ){\n\n  }\n\n  public ngOnInit(): void {\n     this.subScribeToLoaderService();\n  }\n  private subScribeToLoaderService(){\n        this.loaderService.loderObs$.subscribe((loaderState: boolean)=> {\n          this.showLoader = loaderState;\n        });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-spinner {\n    position: absolute;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    z-index: 9;\n    background-color: #fff;\n    color: #fff;\n    opacity: 0.8;\n  }\n\n  .spinner{\n    position: relative;\n    top: 40%;\n    bottom: 40%;\n    display: inline-block;\n  }",
                    "styleUrl": "./loader.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"loading-spinner\" *ngIf=\"showLoader\">\n    <div class=\"spinner\">\n        <mat-spinner class=\"spinner\"></mat-spinner>\n        <p>Loading... Please wait</p>\n    </div>\n   \n</div>\n\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-e5d2221455d22e863b02402505616c5086cd83daa08b24b51b942d1a2dce86800d84777df39ca57911c9ea9641eedaa21385b4aebe42f26a9c95c354ba4b8027",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetErrorMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n\nimport { ErrorMessage } from '../models/error-messages';\nimport { LoginToken } from '../models/login-token';\n\nimport { AuthService } from '../services/auth.service';\nimport { ErrorService } from '../services/shared/error.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  public email = '';\n  public password = '';\n\n  constructor(private authService: AuthService, \n    private errorService: ErrorService, private router: Router){\n\n  }\n  public login(){\n     this.resetErrorMessages();\n     this.authService.login(this.email, this.password).subscribe((result: LoginToken)=> {\n         this.authService.setCurrentUser(this.email,result);\n         this.router.navigate(['/']);\n     },(error: any)=> {\n          const { message } = error?.error || 'An error occured';\n          const errorMessage: ErrorMessage = {\n              message\n          };\n          this.errorService.setNewErrorMessage(errorMessage);\n            \n        });\n  }\n\n  public resetErrorMessages(){\n      this.errorService.resetErrorMessage();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-form{\n    width: 100%;\n}\n.login-form-field{\n    width: 100%;\n}\n\n.login-container{\n    padding-top: 15%;\n    width: 20%;\n    margin-left: 40%;\n}\n.login-btn{\n    margin-right: 10px;\n}",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"login-container\">\n<h2 align=\"center\">Login</h2>\n\n<form class=\"login-form\">\n  <mat-form-field class=\"login-form-field\">\n    <mat-label>Email</mat-label>\n    <input matInput type=\"email\" [(ngModel)]=\"email\" name=\"email\" />\n  </mat-form-field>\n  <mat-form-field class=\"login-form-field\">\n    <mat-label>Password</mat-label>\n    <input matInput type=\"password\" [(ngModel)]=\"password\" name=\"password\" />\n  </mat-form-field>\n  <button class=\"login-btn\" mat-raised-button color=\"primary\" (click)=\"login()\">Login</button>\n  <a href=\"/sign-up\">Sign Up</a>\n</form>\n</div>\n"
        },
        {
            "name": "MainBannerComponent",
            "id": "component-MainBannerComponent-55ec3b47e3b35a29bf884e6915c81209cdfc31b20cfe3787764ea5fdd3fe9dbbba4fcc7b0ceeaad3f115777799c632fad252e40efa748a5cf8b2d3a0dd1d976f",
            "file": "src/app/main-banner/main-banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-banner",
            "styleUrls": [
                "./main-banner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main-banner',\n  templateUrl: './main-banner.component.html',\n  styleUrls: ['./main-banner.component.css']\n})\nexport class MainBannerComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".banner-container{\n    display: grid;\n    grid-template-columns: auto auto;\n    justify-content: center;\n    background-color: #f5f5f5;\n}\n\n.banner-image img{\n    width: auto;\n    height: 400px;\n}\n.banner-content{\n    text-align: center;\n    padding-top: 40%;\n    padding-left: 3%;\n    padding-right: 3%;\n}\n.shop-button{\n    background-color: transparent;\n    color: #673ab7;\n    width: 100px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n.shop-button:hover{\n  background-color: #673ab7;\n  color: #fff;\n}",
                    "styleUrl": "./main-banner.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "\n<div class=\"banner-container\">\n    <div class=\"banner-grid\">\n         <div class=\"banner-content\">\n             <h2>Get your loved ones the gifts they deserve</h2>\n             <button mat-raised-button class=\"shop-button\">Shop</button>\n         </div>\n    </div>\n    <div class=\"banner-grid\">\n        <div class=\"banner-image\">\n            <img  src=\"../../assets/images/blackfriday.jpg\" alt='' />\n        </div>\n   </div>\n</div>"
        },
        {
            "name": "MainDashboardComponent",
            "id": "component-MainDashboardComponent-8e4b748d2b3c215f595003b658ca64bcac113ad88ad94be29f46c2e2ac5c1a4643144db046f0814843b5c0e368055e80716f0e9f5597eb8d13fe5ea8e7650a9a",
            "file": "src/app/user-dashboard/main-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-dashboard",
            "styleUrls": [
                "./main-dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main-dashboard',\n  templateUrl: './main-dashboard.component.html',\n  styleUrls: ['./main-dashboard.component.css']\n})\nexport class MainDashboardComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-dashboard.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-navbar></app-navbar>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-71bd2c690fa774b266a13def29221d18169e8f62e35f90ff3f6fcd6102732063cdfa4d2363fc496a9eb6b84f9968e9c98e6549aca0f9de4ee9e784ecfc09b664",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemsInCart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loggedInUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemsInCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getLoggedInUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ShoppingCartService } from '../services/shopping-cart.service';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit{\n\n  public itemsInCart$!: Observable<number>;\n  public loggedInUser: any;\n\n  constructor(private cartService: ShoppingCartService,\n    private authService: AuthService,\n    private router: Router){\n\n  }\n\n  public ngOnInit(): void {\n    this.getLoggedInUser();\n    this.getItemsInCart();\n  }\n  \n  public getItemsInCart(){\n      this.itemsInCart$= this.cartService.getItemsInCart();\n  }\n  private getLoggedInUser(){\n      this.loggedInUser = this.authService.getSignedInUser();\n  }\n  public logOut(){\n    this.authService.logout();\n    this.getLoggedInUser();\n    this.router.navigate(['/']);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-navbar{\nposition: fixed;\ntop: 0;\nleft: 0;\nright: 0;\nz-index: 2;\n}\n.example-spacer {\n    flex: 1 1 auto;\n}\n.router-link{\n    text-decoration: none;\n    color: #FFF;\n}",
                    "styleUrl": "./navbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"app-navbar\">\n<mat-toolbar color=\"primary\">\n    <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n      <mat-icon>menu</mat-icon>\n    </button>\n    <span><a [routerLink]=\"['/']\" class=\"router-link\">Elgon Shop</a></span>\n    <span class=\"\"></span>\n    <span class=\"example-spacer\"></span>\n    <span>\n      <a [routerLink]=\"['/shopping-cart']\" class=\"router-link\">\n      <mat-icon aria-hidden=\"false\" matBadge=\"{{itemsInCart$ | async}}\" matBadgeColor=\"warn\" aria-label=\"Shopping cart icon\" fontIcon=\"shopping_cart\" *ngIf=\"loggedInUser?.email\"></mat-icon> \n      \n     </a>\n   </span>\n   <span class=\"\"></span>\n   <!--\n    <span>\n    <app-search></app-search>\n  </span>\n-->\n    <button mat-button [matMenuTriggerFor]=\"menu\" *ngIf=\"loggedInUser?.email\">\n      {{ loggedInUser?.email }} <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\" fontIcon=\"person\"></mat-icon>\n    </button>\n    <a [routerLink]=\"['/login']\" class=\"router-link\" *ngIf=\"!loggedInUser?.email\">Login</a>\n    <mat-menu #menu=\"matMenu\">\n    <button mat-menu-item>My Account</button>\n    <button mat-menu-item>Orders</button>\n    <button mat-menu-item (click)=\"logOut()\">Log out</button>\n    </mat-menu>\n    <button mat-button [matMenuTriggerFor]=\"adminMenu\">\n     Admin <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\" fontIcon=\"person\"></mat-icon>\n    </button>\n    <mat-menu #adminMenu=\"matMenu\">\n      <a [routerLink]=\"['/admin']\" class=\"router-link\" mat-menu-item>Dashboard</a>\n    </mat-menu>\n  </mat-toolbar>\n  </nav>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-f32a6b0b7744285f368448258c7645792ce220515617531e71e75a17f6a3d6faf2f17b4092650e43108bb1ddbf1fe965e362e5ac2058c62d971b7e6479a5ad8e",
            "file": "src/app/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [
                "./page-not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-not-found.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>page-not-found works!</p>\n"
        },
        {
            "name": "ProductComponent",
            "id": "component-ProductComponent-9edcde637844d799bd573c138cef317a7520da1db9a816c7af03042c563924bc35d4aab216ba9cf71b45b97265a9850fc84b941ba06fa7070a24ed08aa7c238b",
            "file": "src/app/product/product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product",
            "styleUrls": [
                "./product.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredProducts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterParams",
                    "defaultValue": "{\n   minPrice: 0,\n   maxPrice: 0,\n   rating: 0,\n }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductFilterParams",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getProductsByCategoryId",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { ProductsService } from '../services/products.service';\nimport { ShoppingCartService } from '../services/shopping-cart.service';\n\nimport { Product } from '../models/product';\nimport { LoaderService } from '../services/loader.service';\n\nimport { ProductFilterParams } from '../models/product-filter';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit{\n public products: Product[] = [];\n public quantity: number = 1;\n public filterParams: ProductFilterParams = {\n   minPrice: 0,\n   maxPrice: 0,\n   rating: 0,\n };\n public filteredProducts: Product[] = [];\n\n\n  constructor(private productService: ProductsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private cartService: ShoppingCartService,\n    private loaderService:LoaderService){\n\n  }\n\n\n  public ngOnInit(): void {\n     this.route.paramMap.subscribe((params: ParamMap)=> {\n        if(params){\n            const categoryId = params.get('id');\n            this.getProductsByCategoryId(Number(categoryId));\n        }\n     });\n\n     this.route.queryParams.subscribe((params: any)=> {\n        if(params){\n           this.filterParams = params;\n           this.filterProducts();\n        }\n     });\n  }\n\n  getProductsByCategoryId(categoryId: number){\n     this.showLoader();\n     this.productService.getProductByCategoryId(categoryId)\n     .subscribe((products: Product[])=> {\n        this.products = products;\n        this.filterProducts();\n        this.hideLoader();\n     });\n  }\n\n  viewProduct(productId: number): void{\n       this.router.navigate(['./product/', productId]);\n  }\n\n  addToCart(product: Product,quantity: number){\n\n   this.cartService.addItemsToCart(product,quantity);\n\n  }\n  public showLoader(){\n    this.loaderService.showLoader();\n  }\n  public hideLoader(){\n     this.loaderService.hideLoader();\n  }\n  private filterProducts(){\n   const filterParams = this.filterParams;\n     if('maxPrice' in filterParams){\n\n      this.filteredProducts = this.products.filter((product: Product)=> {\n           return (product.price >= filterParams.minPrice \n           && product.price <= filterParams.maxPrice\n           && product.rating >= filterParams.rating)\n      });\n\n     }else{\n        this.filteredProducts = this.products;\n     }\n     \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".products-content{\n    padding-left: 10%;\n    padding-right: 10%;\n    padding-top: 50px;\n}\n.products-filter-container{\n    display: grid;\n    grid-template-columns: 20% 80%;\n}\n.product-grid-container{\n    display: grid;\n    grid-template-columns: auto auto auto;\n}\n.category-card{\n    height: 480px;\n    width: 300px;\n}\n.category-card img{\n    max-height: 45%;\n}\n.product-btn{\n    background-color: #FFF;\n    color: #673ab7;\n    width: 50%;\n}\n.product-btn:hover{\n    background-color: #673ab7;\n    color: #FFF;\n}\n.section-title{\n    text-align: center;\n}\n.product-title{\n    color: #673ab7;\n}",
                    "styleUrl": "./product.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"products-content\">\n    <h2 class=\"section-title\">Products</h2>\n    <div class=\"products-filter-container\">\n    <div class=\"product-filter\">\n       <app-product-filter></app-product-filter>\n    </div>\n    <div class=\"products\">\n      <div class=\"product-grid-container\" *ngIf=\"filteredProducts.length > 0\">\n      <div class=\"product-grid-item\" *ngFor=\"let product of filteredProducts; index as i\">\n          <mat-card class=\"category-card\">\n              <img mat-card-image  src=\"../../../assets/images/{{product.productImg}}\"  alt=\"{{product.name}}\">\n              <mat-card-content>\n                <h3 class=\"product-title\">{{product.name}}</h3>\n                <p>Price : {{product.price}}</p>\n                <mat-form-field>\n                  <mat-label>Quantity</mat-label>\n                  <input matInput [(ngModel)]=\"quantity\" type=\"number\">\n              </mat-form-field>\n              <p><app-rating [rating]=\"product.rating\" [maxRating]=\"5\"></app-rating></p>\n              </mat-card-content>\n              <mat-card-actions>\n                <button mat-raised-button color=\"primary\" (click)=\"viewProduct(product.id)\" class=\"product-btn\">View</button>\n                <button mat-raised-button color=\"primary\" (click)=\"addToCart(product,quantity)\" class=\"product-btn\">\n                  Add to cart\n                  <mat-icon aria-hidden=\"false\" aria-label=\"Shopping cart icon\" fontIcon=\"shopping_cart\"></mat-icon>\n                </button>\n              </mat-card-actions>\n            </mat-card>\n      </div>\n       \n    </div>\n  </div>\n  </div>\n  \n  </div>"
        },
        {
            "name": "ProductDetailsComponent",
            "id": "component-ProductDetailsComponent-4f8077219a107ea8f5dfb5566e452dac5c8ad48c5809cf748149a8572174f80758d3c2bbe499991a52cc4e06a844ddbfdc5f8a1cce25e4cca5465368932062a2",
            "file": "src/app/product/product-details/product-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-details",
            "styleUrls": [
                "./product-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hideCartButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "product",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getProductDetails",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleAddToCartButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { ProductDetailsService } from '../../services/product-details.service';\nimport { ShoppingCartService } from '../../services/shopping-cart.service';\n\nimport { Product } from '../../models/product';\nimport { CartItem } from 'src/app/models/shopping-cart';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n    public product:Product[] = [];\n    public quantity = 1;\n    public hideCartButton = false;\n    public cart: CartItem[] = [];\n    public productId!: number;\n    constructor(private productDetailsService: ProductDetailsService,\n      private route: ActivatedRoute,\n      private cartService: ShoppingCartService){\n\n    }\n    public ngOnInit(): void {\n       this.route.paramMap.subscribe((params: ParamMap)=> {\n             if(params){\n                 this.productId = Number(params.get('id'));\n                 this.getProductDetails(this.productId);\n                \n             }\n       });\n      \n    }\n    public getProductDetails(productId: number){\n        this.productDetailsService.getProductById(productId).subscribe((product: Product[])=> {\n           this.product = product;\n           this.getCart();\n           this.toggleAddToCartButton();\n        });;\n    }\n\n    public addToCart(product: Product, quantity: number): void{\n       this.cartService.addItemsToCart(product,quantity);\n       this.hideCartButton = true;\n       this.getCart();\n    }\n    public getCart(){\n      this.cart = this.cartService.getCart();\n    }\n    public toggleAddToCartButton(){\n        const hasProduct = this.cart.some((item: CartItem)=> {\n              return item.productId === this.productId; \n        });\n        this.hideCartButton = hasProduct;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\n    padding-top: 50px;\n    padding-left: 10%;\n    padding-right: 10%;\n    display: grid;\n    grid-template-columns: 60% 40%;\n}\n.col{\n    text-align: left;\n}\n.col img{\n    width: 80%;\n    height: auto;\n}\n",
                    "styleUrl": "./product-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productDetailsService",
                        "type": "ProductDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "productDetailsService",
                        "type": "ProductDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngFor=\"let prod of product\" class=\"container\">\n\n    <div class=\"col\">\n        <img src=\"../../../assets/images/{{prod.productImg}}\" alt={{prod.productImg}} />\n    </div>\n    <div class=\"col\">\n        <h2>{{prod.name}}</h2>\n        <p>Price : {{prod.price}}</p>\n        <p>In Stock: {{prod.inStock > 0 ? 'Yes': 'No'}}</p>\n        <mat-form-field>\n            <mat-label>Quantity</mat-label>\n            <input matInput [(ngModel)]=\"quantity\" type=\"number\">\n        </mat-form-field>\n        <p><app-rating [rating]=\"prod.rating\" [maxRating]=\"5\"></app-rating></p>\n        <p><button mat-raised-button color=\"primary\" (click)=\"addToCart(prod,quantity)\" [disabled]=\"hideCartButton\">\n            Add to Cart\n            <mat-icon aria-hidden=\"false\" aria-label=\"Shopping cart icon\" fontIcon=\"shopping_cart\"></mat-icon>\n        </button></p>\n    </div>\n</div>\n\n  "
        },
        {
            "name": "ProductFilterComponent",
            "id": "component-ProductFilterComponent-bb2435e15a383b17b212544704270a62d198ab61fa0106c91a0ac383ffae4c28420186e87b08a5321fb1c1538dcc42aaf0a7ded8ab8a355fcc768f195a9ae8c3",
            "file": "src/app/product/product-filter/product-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-filter",
            "styleUrls": [
                "./product-filter.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./product-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "maxPrice",
                    "defaultValue": "200000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minPrice",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rating",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { Router } from '@angular/router';\n\nimport { ProductFilterParams } from 'src/app/models/product-filter';\n\n@Component({\n  selector: 'app-product-filter',\n  templateUrl: './product-filter.component.html',\n  styleUrls: ['./product-filter.component.css']\n})\nexport class ProductFilterComponent {\n\n  public minPrice = 0;\n  public maxPrice = 200000;\n  public rating = 1;\n\n  constructor(private router: Router){\n\n  }\n\n  public applyFilter(){\n    const filterParams: ProductFilterParams = {\n      minPrice: this.minPrice,\n      maxPrice: this.maxPrice,\n      rating: this.rating\n    };\n\n   this.router.navigate([], {queryParams: filterParams});\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pf-container{\n    display: grid;\n    grid-template-columns: 100%;\n}",
                    "styleUrl": "./product-filter.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"pf-container\">\n    <div class=\"pf-grid-item\">\n        <h3>Product Filter</h3>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Min Price</mat-label>\n            <input matInput [(ngModel)]=\"minPrice\">\n        </mat-form-field> \n        <mat-form-field appearance=\"outline\">\n            <mat-label >Max Price </mat-label>\n            <input matInput [(ngModel)]=\"maxPrice\">\n        </mat-form-field> \n        <mat-form-field appearance=\"outline\">\n            <mat-label>Rating</mat-label>\n            <mat-select [(ngModel)]=\"rating\">\n              <mat-option value=1>1</mat-option>\n              <mat-option value=2>2</mat-option>\n              <mat-option value=3>3</mat-option>\n              <mat-option value=4>4</mat-option>\n              <mat-option value=5>5</mat-option>\n            </mat-select>\n        </mat-form-field>   \n        <button mat-raised-button color=\"primary\" (click)=\"applyFilter()\">Apply Filter</button>\n    </div>\n</div>"
        },
        {
            "name": "RatingComponent",
            "id": "component-RatingComponent-78a28d4bf5c5bc5fbdac7df02d2867316b32c2ddfdd83661b387f81bbbdf941c61be9692047e8d6fd3a7d436e23e3971815e760d1cf73ca5e9abe1bb805ae237",
            "file": "src/app/rating/rating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rating",
            "styleUrls": [
                "./rating.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./rating.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "maxRating",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rating",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "stars",
                    "defaultValue": "new Array(this.maxRating).fill(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setStars",
                    "args": [
                        {
                            "name": "maxStars",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "maxStars",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-rating',\n  templateUrl: './rating.component.html',\n  styleUrls: ['./rating.component.css']\n})\nexport class RatingComponent implements OnInit, OnChanges {\n\n   @Input() rating: number = 0;\n   @Input() maxRating: number = 5;\n\n   public stars: number[] = new Array(this.maxRating).fill(0);\n   constructor(){\n\n   }\n\n   public ngOnInit(): void {\n     \n   }\n   public ngOnChanges(changes: SimpleChanges): void {\n      const { maxRating } = changes;\n      if(maxRating.currentValue !== null){\n          this.setStars(maxRating.currentValue);\n      }\n   }\n   public setStars(maxStars: number){\n      this.stars = new Array(this.maxRating).fill(0);\n   }\n\n   \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rating-container{\n    display: grid;\n    grid-template-columns: 100%;\n}\n.checked{\n    color:  #673ab7;;\n}\n.unchecked{\n    color: grey;\n}",
                    "styleUrl": "./rating.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"rating-container\">\n<div class=\"rating-grid\">\n    <span>\n    <mat-icon \n    *ngFor=\"let product of stars; index as i\"\n    aria-hidden=\"false\" \n    aria-label=\"Rating icon\" \n    fontIcon=\"star\"\n    [ngClass]=\"{'checked' : i+1 <= rating, 'unchecked': i+1 > rating }\">\n    </mat-icon>\n   \n    </span>\n    <span>\n        <p>Rating:  ({{rating}} / 5)</p>\n    </span>\n</div>\n\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-eff95af93e7eab23b2f2d9d145196e1388466906eb897af3250d25df92853ae0319aec4a16c893a5cd0ad8f534ad51cdaed8516444389bda2127e2f7df3895a9",
            "file": "src/app/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [
                "./search.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent {\n\n  public searchText: string = '';\n\n  constructor(){\n\n  }\n\n  public search(){\n    const searchText = this.searchText;\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-field{\n    height: 85%;\n    margin-top: 6%;\n    padding-left: 5px;\n    width: 400px;\n}\n.search-btn{\n    height: 56px;\n    margin-bottom: 4%;\n}",
                    "styleUrl": "./search.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<mat-form-field class=\"search-field\">\n    <mat-label>Search</mat-label>\n    <input matInput type=\"text\"  class=\"search-input\"  [(ngModel)]=\"searchText\"/>\n</mat-form-field>   \n<button class=\"search-btn\" mat-raised-button color=\"\" (click)=\"search()\">Search</button>\n"
        },
        {
            "name": "ShoppingCartComponent",
            "id": "component-ShoppingCartComponent-46e7751ef6e9eb7980f6147bb92eb827f2fca50a9ee526d821118c43c7e91c0c165f91dc1532dffc9a1f6f9cb7aa705d769c39c5f50660d83b21b13fe6f91dd5",
            "file": "src/app/shopping-cart/shopping-cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-cart",
            "styleUrls": [
                "./shopping-cart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Cart",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['productId','productName', 'unitPrice', 'quantity', 'total' ,'edit']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalCost",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editCartItem",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTotalCost",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onRowClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCartItem",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { ShoppingCartService } from '../services/shopping-cart.service';\n\nimport { Product } from '../models/product';\nimport { Cart, CartItem } from '../models/shopping-cart';\nimport { ShoppingCartDialogComponent } from './shopping-cart-dialog/shopping-cart-dialog.component';\n\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css']\n})\nexport class ShoppingCartComponent implements OnInit{\n  public displayedColumns: string[] = ['productId','productName', 'unitPrice', 'quantity', 'total' ,'edit'];\n  public cart!: Cart;\n  public cartItems: CartItem[] = [];\n  public totalCost: number = 0;\n\n  constructor(private cartService: ShoppingCartService, \n    private dialog: MatDialog,\n    private router: Router){\n\n  }\n\n  public ngOnInit(): void {\n    this.getCart();\n  }\n\n  public onRowClick(row: any){\n  }\n  public editCartItem(element: any){\n    this.openDialog(element);\n  }\n  public removeCartItem(element: any){\n    this.cartItems = this.cartItems.filter((item: CartItem)=> {\n         return item.productId !== element.productId;\n    });\n    this.cartService.setCart(this.cartItems);\n  }\n  public getCart(){\n      this.cartItems = this.cartService.getCart();\n  }\n  public openDialog(element: any): void {\n    const dialogRef = this.dialog.open(ShoppingCartDialogComponent, {\n      data: element\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n  public getTotalCost() {\n    this.totalCost = this.cartItems.map((t:CartItem) => t.unitPrice * t.quantity).reduce((acc, value) => acc + value, 0);\n    return this.totalCost;\n  }\n\n  public checkout(){\n    this.router.navigate(['/checkout']);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid{\n    width: 60%;\n    padding-left: 20%;\n    padding-top: 100px;\n}",
                    "styleUrl": "./shopping-cart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"grid\">\n\n     <h2>Cart</h2>\n        <table mat-table [dataSource]=\"cartItems\" class=\"mat-elevation-z8 demo-table\">\n            <!-- Position Column -->\n            <ng-container matColumnDef=\"productId\">\n              <th mat-header-cell *matHeaderCellDef>Pro</th>\n              <td mat-cell *matCellDef=\"let element\">{{element.productId}}</td>\n              <td mat-footer-cell *matFooterCellDef> Total </td>\n            </ng-container>\n          \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"productName\">\n              <th mat-header-cell *matHeaderCellDef>Name</th>\n              <td mat-cell *matCellDef=\"let element\">{{element.productName}}</td>\n              <td mat-footer-cell *matFooterCellDef></td>\n            </ng-container>\n          \n            <!-- Weight Column -->\n            <ng-container matColumnDef=\"unitPrice\">\n              <th mat-header-cell *matHeaderCellDef>Unit Price</th>\n              <td mat-cell *matCellDef=\"let element\">{{element.unitPrice}}</td>\n              <td mat-footer-cell *matFooterCellDef></td>\n            </ng-container>\n          \n            <!-- Symbol Column -->\n            <ng-container matColumnDef=\"quantity\">\n              <th mat-header-cell *matHeaderCellDef>Quantity</th>\n              <td mat-cell *matCellDef=\"let element\">{{element.quantity}}</td>\n              <td mat-footer-cell *matFooterCellDef></td>\n            </ng-container>\n\n             <!-- Symbol Column -->\n             <ng-container matColumnDef=\"total\">\n              <th mat-header-cell *matHeaderCellDef>Total</th>\n              <td mat-cell *matCellDef=\"let element\">{{element.quantity * element.unitPrice}}</td>\n              <td mat-footer-cell *matFooterCellDef> {{getTotalCost()}} </td>\n            </ng-container>\n        \n             <!-- Symbol Column -->\n             <ng-container matColumnDef=\"edit\">\n                <th mat-header-cell *matHeaderCellDef></th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <button mat-raised-button color=\"primary\" (click)=\"editCartItem(element)\">Edit</button>\n                    <button mat-raised-button color=\"warn\" (click)=\"removeCartItem(element)\">Remove</button>\n                </td>\n                <td mat-footer-cell *matFooterCellDef></td>\n              </ng-container>\n          \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr\n                mat-row\n                *matRowDef=\"let row; columns: displayedColumns;\"\n            ></tr>\n            <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr>\n          </table>\n\n          <p></p>\n\n          <button mat-raised-button color=\"primary\" (click)=\"checkout()\" [disabled]=\"cartItems.length === 0\">Checkout</button>\n  \n        </div>\n  \n\n  "
        },
        {
            "name": "ShoppingCartDialogComponent",
            "id": "component-ShoppingCartDialogComponent-6173e10e7249af33a521e9748ea36f59bfba76c58f990a20f58adad505b5e36f2026df41543cf1fa0d30beba766a1d08a0e2262a090fb5edfd3f2a527e2ea052",
            "file": "src/app/shopping-cart/shopping-cart-dialog/shopping-cart-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-cart-dialog",
            "styleUrls": [
                "./shopping-cart-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ShoppingCartDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "productName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "successMessages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unitPrice",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ShoppingCartService } from '../../services/shopping-cart.service';\n\n\n@Component({\n  selector: 'app-shopping-cart-dialog',\n  templateUrl: './shopping-cart-dialog.component.html',\n  styleUrls: ['./shopping-cart-dialog.component.css']\n})\nexport class ShoppingCartDialogComponent {\n\n  public productName: string = '';\n  public unitPrice: number = 0;\n  public quantity: number = 0;\n  public errorMessages: {message: string}[] = [];\n  public successMessages: {message: string}[] = [];\n\n\n  constructor(\n    public dialogRef: MatDialogRef<ShoppingCartDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private cartService: ShoppingCartService\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  updateCart(){\n     this.cartService.updateCart(this.data).then((result: any)=> {\n         console.log('result', result);\n         this.successMessages = [{\n          message: result\n         }];\n     }).catch((error: Error)=> {\n         console.log('error', error);\n         this.errorMessages = [{\n           message: error?.message || 'An error occured while updating cart. please try again'\n         }]\n     });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-form-field{\n    width: 100%;\n}\n\n.error-item{\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    text-align: center;\n}\n.success-item{\n    color: #155724;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    text-align: center;\n}\n.success-list{\n    width: 80%;\n    margin-left: 10%;\n    margin-right: 10%;\n    margin-top: 50px;\n}",
                    "styleUrl": "./shopping-cart-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShoppingCartDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ShoppingCartDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "ShoppingCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-list class=\"error-list\" *ngIf=\"errorMessages.length > 0\">\n    <mat-list-item *ngFor=\"let error of errorMessages; index as i\" class=\"error-item\">{{error.message}}</mat-list-item>\n</mat-list>\n<mat-list class=\"success-list\" *ngIf=\"successMessages.length > 0\">\n    <mat-list-item *ngFor=\"let success of successMessages; index as i\" class=\"success-item\">{{success.message}}</mat-list-item>\n</mat-list>\n\n<h1 mat-dialog-title></h1>\n<div mat-dialog-content>\n  <p>Edit Shopping Cart</p>\n  <mat-form-field class=\"dialog-form-field\">\n    <mat-label>Product</mat-label>\n    <input matInput [(ngModel)]=\"data.productName\" readonly disabled>\n  </mat-form-field>\n  <mat-form-field class=\"dialog-form-field\">\n    <mat-label>Price</mat-label>\n    <input matInput [(ngModel)]=\"data.unitPrice\" readonly disabled>\n  </mat-form-field>\n  <mat-form-field class=\"dialog-form-field\">\n    <mat-label>Quantity</mat-label>\n    <input matInput [(ngModel)]=\"data.quantity\" type=\"number\">\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\">Close</button>\n  <button mat-raised-button color=\"primary\" (click)=\"updateCart()\">Save</button>\n</div>\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-22425c6011a45ae37124efc34606c06ca76220620f366c3839d7bcddc2a22a4359ac41042689b672c41633d662f8d2f482f712e179b6e0ddc49de5e9d55c60cc",
            "file": "src/app/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../services/auth.service';\n\nimport { ErrorMessage } from '../models/error-messages';\nimport { ErrorService } from '../services/shared/error.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css'],\n})\nexport class SignUpComponent {\n  public email = '';\n  public password = '';\n\n  constructor(\n    private authService: AuthService,\n    private errorService: ErrorService,\n    private router: Router\n  ) {}\n\n  public signUp() {\n    this.authService.signUp(this.email, this.password).subscribe(\n      (result: any) => {\n        this.router.navigate(['/login']);\n      },\n      (error: ErrorMessage[]) => {\n        this.errorService.setNewErrorMessage({\n          message:\n            error[0]?.message || 'Sign up was Unsuccessfull, please try agin',\n        });\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".signup-form{\n    width: 100%;\n}\n.signup-form-field{\n    width: 100%;\n}\n\n.signup-container{\n    padding-top: 15%;\n    width: 20%;\n    margin-left: 40%;\n}",
                    "styleUrl": "./sign-up.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"signup-container\">\n    <h2 align=\"center\">Register</h2>\n    \n    <form class=\"signup-form\">\n      <mat-form-field class=\"signup-form-field\">\n        <mat-label>Email</mat-label>\n        <input matInput type=\"email\" [(ngModel)]=\"email\" name=\"email\" />\n      </mat-form-field>\n      <mat-form-field class=\"signup-form-field\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" [(ngModel)]=\"password\" name=\"password\" />\n      </mat-form-field>\n      <button mat-raised-button color=\"primary\" (click)=\"signUp()\">Sign Up</button>\n    </form>\n    </div>\n    "
        },
        {
            "name": "SubCategoriesComponent",
            "id": "component-SubCategoriesComponent-ced8a3dc53de85f55c869c21711024ebc5b3f401af79477dd12d60c095e336f7289ac6635bd98ef7ea2f4188dd8314ece55560fe3d4508fd9bdeb0250f5d7aa2",
            "file": "src/app/admin-dashboard/sub-categories/sub-categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sub-categories",
            "styleUrls": [
                "./sub-categories.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sub-categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-sub-categories',\n  templateUrl: './sub-categories.component.html',\n  styleUrls: ['./sub-categories.component.css'],\n})\nexport class SubCategoriesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-sub-category-grid-container {\n  display: grid;\n  grid-template-columns: auto;\n  padding-left: 5%;\n  padding-right: 5%;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\n.create-sub-category {\n  text-align: center;\n  padding-top: 100px;\n  padding-left: 30%;\n  padding-right: 30%;\n}\n",
                    "styleUrl": "./sub-categories.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"create-sub-category-grid-container\">\n  <div class=\"create-product-grid\">\n    <mat-tab-group>\n      <mat-tab label=\"Create Sub-Category\">\n        <div class=\"create-sub-category\">\n          <h2>Add Sub Category</h2>\n          <app-create-sub-category></app-create-sub-category>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Sub Category\">\n        <app-sub-category-list></app-sub-category-list>\n      </mat-tab>\n    </mat-tab-group>\n  </div>\n</div>\n"
        },
        {
            "name": "SubCategoryListComponent",
            "id": "component-SubCategoryListComponent-113cd97a56f349acb99e66fbf5872ca7b3ea0f5ac06fa8123368632403c4a655a6e9350162e4f1bb1fe26817a486076716bbcb8e660cf20ab131bc8bbe95e11e",
            "file": "src/app/admin-dashboard/sub-categories/sub-category-list/sub-category-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sub-category-list",
            "styleUrls": [
                "./sub-category-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sub-category-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'description', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subCategoryList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubCategory[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getAllSubCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SubCategory } from '../../../models/sub-category';\nimport { SubCategoryService } from '../../../services/sub-category.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-sub-category-list',\n  templateUrl: './sub-category-list.component.html',\n  styleUrls: ['./sub-category-list.component.css'],\n})\nexport class SubCategoryListComponent implements OnInit {\n  subCategoryList$!: Observable<SubCategory[]>;\n  public displayedColumns: string[] = ['id', 'name', 'description', 'action'];\n\n  constructor(private subCategoryService: SubCategoryService) {}\n\n  ngOnInit(): void {\n    this.getAllSubCategories();\n  }\n  getAllSubCategories() {\n    this.subCategoryList$ = this.subCategoryService.getAllSubCategories();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sub-category-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "subCategoryService",
                        "type": "SubCategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table mat-table [dataSource]=\"subCategoryList$\" class=\"mat-elevation-z8\">\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef>No.</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element.id }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef>Name</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"description\">\n    <th mat-header-cell *matHeaderCellDef>Description</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element.description }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"action\">\n    <th mat-header-cell *matHeaderCellDef>Action</th>\n    <td mat-cell *matCellDef=\"let element\">\n      <button class=\"action-btn\" mat-button mat-raised-button color=\"primary\">\n        Edit\n      </button>\n      <span></span>\n      <button class=\"action-btn\" mat-button mat-raised-button color=\"warn\">\n        Delete\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n"
        },
        {
            "name": "TableListComponent",
            "id": "component-TableListComponent-ef6055cd3c97d8954f54f441c21d06baf942f4a6fab7847d77ccf72cda720518462480939441caa761776ae395f03e41c4623f52e2eb2a81e8719318495d709c",
            "file": "src/app/table-list/table-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-list",
            "styleUrls": [
                "./table-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnDefs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ColumnDefs[]",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ColumnDefs } from '../models/table-list';\n\n@Component({\n  selector: 'app-table-list',\n  templateUrl: './table-list.component.html',\n  styleUrls: ['./table-list.component.css']\n})\nexport class TableListComponent {\n\n  @Input() title: string = '';\n  @Input() public dataSource: any;\n  @Input() public columnDefs: ColumnDefs[] = [];\n  @Input() public displayedColumns: string[] = [];\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-title{\n    text-align: center;\n}",
                    "styleUrl": "./table-list.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<h3 class=\"table-title\">{{title}}</h3>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n  \n    <ng-container matColumnDef=\"{{colDef.columnDef}}\" *ngFor=\"let colDef of columnDefs\">\n      <th mat-header-cell *matHeaderCellDef> {{ colDef.headerCellDef}} </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element[colDef.matCellDef]}} </td>\n    </ng-container>\n\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-9c6a3bc4c3f58cfd47cd102b7dca5514677ac84dc2eb67c858a4dedba6d93fa8b3647a6e300a57c018361f0e20b3a1942940544693537a8ec45d73ffe97b5272",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin-dashboard/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdminComponent } from './admin.component';\n\nimport { AdminRoutingModule } from './admin-routing/admin-routing.module';\nimport { CreateCategoryComponent } from './category/create-category/create-category.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgMaterialModule } from '../ng-material/ng-material.module';\nimport { NavbarModule } from '../navbar/navbar.module';\nimport { CategoryListComponent } from './category/category-list/category-list.component';\nimport { AdminProductComponent } from './product/product.component';\nimport { CreateProductComponent } from './product/create-product/create-product.component';\nimport { SubCategoriesComponent } from './sub-categories/sub-categories.component';\nimport { SubCategoryListComponent } from './sub-categories/sub-category-list/sub-category-list.component';\nimport { CreateSubCategoryComponent } from './sub-categories/create-sub-category/create-sub-category.component';\nimport { AlertModule } from '../alert/alert.module';\nimport { AdminProductListComponent } from './product/admin-product-list/admin-product-list.component';\nimport { TableListModule } from '../table-list/table-list.module';\n@NgModule({\n  declarations: [\n    AdminComponent,\n    CreateCategoryComponent,\n    CategoryListComponent,\n    AdminProductComponent,\n    CreateProductComponent,\n    SubCategoriesComponent,\n    SubCategoryListComponent,\n    CreateSubCategoryComponent,\n    AdminProductListComponent,\n  ],\n  imports: [\n    AdminRoutingModule,\n    CommonModule,\n    MatTabsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgMaterialModule,\n    NavbarModule,\n    AlertModule,\n    TableListModule\n  ],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminComponent"
                        },
                        {
                            "name": "AdminProductComponent"
                        },
                        {
                            "name": "AdminProductListComponent"
                        },
                        {
                            "name": "CategoryListComponent"
                        },
                        {
                            "name": "CreateCategoryComponent"
                        },
                        {
                            "name": "CreateProductComponent"
                        },
                        {
                            "name": "CreateSubCategoryComponent"
                        },
                        {
                            "name": "SubCategoriesComponent"
                        },
                        {
                            "name": "SubCategoryListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "AlertModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "NgMaterialModule"
                        },
                        {
                            "name": "TableListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "id": "module-AdminRoutingModule-c205fa2e58a72d8e22acfc8a6a2050fb6c8227368ef4ef10da2874bda4514069dfc09e1b93210f390c716da0cffe6f3492284c0c38c904be584ac737d0d0c5c6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin-dashboard/admin-routing/admin-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminComponent } from '../admin.component';\nimport { CreateCategoryComponent } from '../category/create-category/create-category.component';\nimport { AuthGuardService } from 'src/app/services/auth-guard.service';\nimport { AdminProductComponent } from '../product/product.component';\nimport { SubCategoriesComponent } from '../sub-categories/sub-categories.component';\n\nconst routes: Routes = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuardService],\n    children: [\n      {\n        path: 'category',\n        component: CreateCategoryComponent,\n        title: 'Create Category',\n      },\n      {\n        path: 'product',\n        component: AdminProductComponent,\n        title: 'Products',\n      },\n      {\n        path: 'sub-category',\n        component: SubCategoriesComponent,\n        title: 'Sub-Categories',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlertModule",
            "id": "module-AlertModule-2ce50f378dccbc209d6073ad8170939e5ff93b10d89cd1383c69d87b2ef01aa13846f4e29277c21b18f7fcc8c8dd460c512033e04d74310eb7b36659f428963c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/alert/alert.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AlertComponent } from './alert.component';\nimport { AlertService } from '../services/shared/alert.service';\nimport { NgMaterialModule } from '../ng-material/ng-material.module';\n\n\n@NgModule({\n  declarations: [\n    AlertComponent\n  ],\n  imports: [\n    CommonModule,\n    NgMaterialModule\n  ],\n  providers: [AlertService],\n  exports: [AlertComponent]\n})\nexport class AlertModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AlertService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-4a171166da9810a9c2ea93c1d2fd78114e14f70e42e6f10fb3db37533a1bbc4be4b6dcf02463a7d54338ca7de6e06d713eb9f40473992a229ba50cd4e3b015e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { NgMaterialModule } from './ng-material/ng-material.module';\n\nimport { LoginComponent } from './login/login.component';\n\nimport { ErrorComponent } from './error/error.component';\n\nimport { ErrorService } from './services/shared/error.service';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport { CategoryService } from './services/category.service';\nimport { SearchComponent } from './search/search.component';\n\n\nimport { ProductDetailsService } from './services/product-details.service';\nimport { ProductsService } from './services/products.service';\nimport { ShoppingCartDialogComponent } from './shopping-cart/shopping-cart-dialog/shopping-cart-dialog.component';\n\n\nimport { TokenInterceptorService } from './services/interceptors/token-interceptor.service';\nimport { LoaderComponent } from './loader/loader.component';\n\nimport { LoaderService } from './services/loader.service';\n\n\nimport { AdminModule } from './admin-dashboard/admin.module';\nimport { UserDashboardModule } from './user-dashboard/user-dashboard.module';\nimport { SubCategoryService } from './services/sub-category.service';\nimport { AlertModule } from './alert/alert.module';\nimport { TableListModule } from './table-list/table-list.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ErrorComponent,\n    SignUpComponent,\n    SearchComponent,\n    ShoppingCartDialogComponent,\n    LoaderComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    AdminModule,\n    UserDashboardModule,\n    NgMaterialModule,\n    AppRoutingModule,\n    AlertModule,\n    TableListModule\n  ],\n  providers: [\n    ErrorService,\n    CategoryService,\n    ProductDetailsService,\n    ProductsService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptorService,\n      multi: true,\n    },\n    LoaderService,\n    SubCategoryService\n  ],\n  exports: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CategoryService"
                        },
                        {
                            "name": "ErrorService"
                        },
                        {
                            "name": "LoaderService"
                        },
                        {
                            "name": "ProductDetailsService"
                        },
                        {
                            "name": "ProductsService"
                        },
                        {
                            "name": "SubCategoryService"
                        },
                        {
                            "name": "TokenInterceptorService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "ShoppingCartDialogComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "AlertModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgMaterialModule"
                        },
                        {
                            "name": "TableListModule"
                        },
                        {
                            "name": "UserDashboardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-fa2d6e014cb6f86ff3feeac014340d4da32cf691782db8e929c50751c2b7f92d2ab0a671ba5e59c92f2d164dac3bb3f13bd4a4d38fdce0ef661e9255b5461c82",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\n\n\nimport { AuthGuardService } from './services/auth-guard.service';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n    title: 'Login'\n  },\n  {\n    path: 'sign-up',\n    component: SignUpComponent,\n    title: 'Sign Up'\n  },\n  { \n    path: '**', \n    component: PageNotFoundComponent \n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuardService]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "id": "module-NavbarModule-5925d02176b2262ff0a03fcbfe7ede6b956878b8d5c5617a07d8522e7e337cbe46b3cec3be2b2991da2a5f98e7576cdce40e3cf07998eb7b14f9dcf896847775",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/navbar/navbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavbarComponent } from './navbar.component';\nimport { NgMaterialModule } from '../ng-material/ng-material.module';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [NavbarComponent],\n  imports: [\n    CommonModule,\n    NgMaterialModule,\n    RouterModule\n  ],\n  exports: [NavbarComponent]\n})\nexport class NavbarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgMaterialModule",
            "id": "module-NgMaterialModule-93b0cec8a94d207db14f9581dfaf738565567a7abb4cbc1dafbad48164ca952384a89d20e7f78f2cc8c8da848b7a3a7c6ed6220b61ae86feb41aec3f54aaddb8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ng-material/ng-material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// Angular material components\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatListModule } from '@angular/material/list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTabsModule } from '@angular/material/tabs'; \n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatGridListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatListModule,\n    MatCardModule,\n    MatTableModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatStepperModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatSidenavModule,\n    MatTabsModule,\n    MatInputModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatGridListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatListModule,\n    MatCardModule,\n    MatTableModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatStepperModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatSidenavModule,\n    MatTabsModule,\n    MatInputModule,\n  ]\n})\nexport class NgMaterialModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableListModule",
            "id": "module-TableListModule-add56b0f2ee7c29ad8c900056a40bb8fd389d229e7e178160273b1274c529027e17246f730f007ac9584a9a8faa9ac6ae87762a6c43800aeba0e20b9dcded951",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/table-list/table-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TableListComponent } from './table-list.component';\nimport { NgMaterialModule } from '../ng-material/ng-material.module';\n\n\n@NgModule({\n  declarations: [\n    TableListComponent\n  ],\n  imports: [\n    CommonModule,\n    NgMaterialModule\n  ],\n  exports: [TableListComponent]\n})\nexport class TableListModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserDashboardModule",
            "id": "module-UserDashboardModule-0c33334c7f766f87096f2588dede78243e7df8c464a3084f72021aaeef069209b114205f4d3eb8a7849ffaeced003d0ea706d206d0e0eef1b360f575a939ff25",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/user-dashboard/user-dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserDashboardRoutingModule } from './user-dashboard-routing/user-dashboard-routing.module';\n\nimport { MainDashboardComponent } from './main-dashboard.component';\nimport { LandingComponent } from '../landing/landing.component';\nimport { ProductComponent } from '../product/product.component';\nimport { ProductDetailsComponent } from '../product/product-details/product-details.component';\nimport { ShoppingCartComponent } from '../shopping-cart/shopping-cart.component';\nimport { AuthGuardService } from '../services/auth-guard.service';\nimport { CheckoutComponent } from '../checkout/checkout.component';\nimport { AppreciationComponent } from '../appreciation/appreciation.component';\nimport { NavbarComponent } from '../navbar/navbar.component';\nimport { NgMaterialModule } from '../ng-material/ng-material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RatingComponent } from '../rating/rating.component';\nimport { ProductsService } from '../services/products.service';\nimport { MainBannerComponent } from '../main-banner/main-banner.component';\nimport { CategoryComponent } from '../category/category.component';\nimport { ProductFilterComponent } from '../product/product-filter/product-filter.component';\nimport { NavbarModule } from '../navbar/navbar.module';\n\n\n@NgModule({\n  declarations: [\n    MainDashboardComponent,\n    LandingComponent,\n    ProductComponent,\n    ProductDetailsComponent,\n    ShoppingCartComponent,\n    CheckoutComponent,\n    AppreciationComponent,\n    RatingComponent,\n    MainBannerComponent,\n    CategoryComponent,\n    ProductFilterComponent\n  ],\n  imports: [\n    CommonModule,\n    UserDashboardRoutingModule,\n    NgMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NavbarModule\n  ],\n  providers: [AuthGuardService, ProductsService]\n})\nexport class UserDashboardModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ProductsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppreciationComponent"
                        },
                        {
                            "name": "CategoryComponent"
                        },
                        {
                            "name": "CheckoutComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "MainBannerComponent"
                        },
                        {
                            "name": "MainDashboardComponent"
                        },
                        {
                            "name": "ProductComponent"
                        },
                        {
                            "name": "ProductDetailsComponent"
                        },
                        {
                            "name": "ProductFilterComponent"
                        },
                        {
                            "name": "RatingComponent"
                        },
                        {
                            "name": "ShoppingCartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "NgMaterialModule"
                        },
                        {
                            "name": "UserDashboardRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserDashboardRoutingModule",
            "id": "module-UserDashboardRoutingModule-84a9b70d0beb916807813448428e33e70ec01b68dcfe759d92e39dd0f403db85ac31df92f2e28a521bf1b9596996e4eb7ae06453f933f3d150b8c11d13b81612",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/user-dashboard/user-dashboard-routing/user-dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nimport { MainDashboardComponent } from '../main-dashboard.component';\nimport { LandingComponent } from '../../landing/landing.component';\nimport { ProductComponent } from '../../product/product.component';\nimport { ProductDetailsComponent } from '../../product/product-details/product-details.component';\nimport { ShoppingCartComponent } from '../..//shopping-cart/shopping-cart.component';\nimport { AuthGuardService } from '../..//services/auth-guard.service';\nimport { CheckoutComponent } from '../../checkout/checkout.component';\nimport { AppreciationComponent } from '../../appreciation/appreciation.component';\n\n\nconst routes: Routes = [\n  {\n     path: '',\n     component: MainDashboardComponent,\n     children: [\n      {\n        path: '',\n        component: LandingComponent\n      },\n      {\n        path: 'products',\n        component: ProductComponent,\n      },\n      {\n        path: 'category/:id',\n        component: ProductComponent,\n        title: 'Category'\n      },\n      {\n        path: 'product/:id',\n        component: ProductDetailsComponent,\n        title: 'Product Details'\n      },\n      {\n        path: 'shopping-cart',\n        component: ShoppingCartComponent,\n        title: 'Shopping Cart',\n        canActivate: [AuthGuardService]\n      },\n      {\n        path: 'checkout',\n        component: CheckoutComponent,\n        title: 'Check Out',\n        canActivate: [AuthGuardService]\n      },\n      {\n        path: 'appreciation',\n        component: AppreciationComponent,\n        title: 'Thank You'\n      }\n     ]\n  }\n];\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class UserDashboardRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    firebase: {\n        apiKey: \"AIzaSyBwZoC9g8SkSG0D6mTEF-9nnsqVZ7hpqw8\",\n        projectId: \"my-shop-b68e0\"\n    }\n    \n}"
            },
            {
                "name": "firebaseDbUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://my-shop-b68e0-default-rtdb.firebaseio.com/shop'"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "nestBaseUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://localhost:3000'"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    firebase: {\n        apiKey: \"AIzaSyBwZoC9g8SkSG0D6mTEF-9nnsqVZ7hpqw8\",\n        projectId: \"my-shop-b68e0\"\n    }\n    \n}"
                },
                {
                    "name": "firebaseDbUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://my-shop-b68e0-default-rtdb.firebaseio.com/shop'"
                },
                {
                    "name": "nestBaseUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000'"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/admin-dashboard/admin-routing/admin-routing.module.ts",
                "module": "AdminRoutingModule",
                "children": [
                    {
                        "path": "admin",
                        "component": "AdminComponent",
                        "canActivate": [
                            "AuthGuardService"
                        ],
                        "children": [
                            {
                                "path": "category",
                                "component": "CreateCategoryComponent",
                                "title": "CreateCategory"
                            },
                            {
                                "path": "product",
                                "component": "AdminProductComponent",
                                "title": "Products"
                            },
                            {
                                "path": "sub-category",
                                "component": "SubCategoriesComponent",
                                "title": "Sub-Categories"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent",
                        "title": "Login"
                    },
                    {
                        "path": "sign-up",
                        "component": "SignUpComponent",
                        "title": "SignUp"
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/user-dashboard/user-dashboard-routing/user-dashboard-routing.module.ts",
                "module": "UserDashboardRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "MainDashboardComponent",
                        "children": [
                            {
                                "path": "",
                                "component": "LandingComponent"
                            },
                            {
                                "path": "products",
                                "component": "ProductComponent"
                            },
                            {
                                "path": "category/:id",
                                "component": "ProductComponent",
                                "title": "Category"
                            },
                            {
                                "path": "product/:id",
                                "component": "ProductDetailsComponent",
                                "title": "ProductDetails"
                            },
                            {
                                "path": "shopping-cart",
                                "component": "ShoppingCartComponent",
                                "title": "ShoppingCart",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "checkout",
                                "component": "CheckoutComponent",
                                "title": "CheckOut",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "appreciation",
                                "component": "AppreciationComponent",
                                "title": "ThankYou"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseDbUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nestBaseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/category/category-list/category-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/category/create-category/create-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/product/admin-product-list/admin-product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/product/create-product/create-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/product/product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/sub-categories/create-sub-category/create-sub-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateSubCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/sub-categories/sub-categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubCategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin-dashboard/sub-categories/sub-category-list/sub-category-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubCategoryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/appreciation/appreciation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppreciationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/category/category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/category/category.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/checkout/checkout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/checkout/checkout.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/checkout/checkout.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Payment",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/main-banner/main-banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainBannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/category.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/category.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateCategoryPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/current-user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/error-messages.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/firebase-login-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseLoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/firebase-login-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseUser",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/login-token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/shopping-cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Cart",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/shopping-cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/sub-category.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubCategory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/success-message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SuccessMessage",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/table-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColumnDefs",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/product-details/product-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/product/product-filter/product-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/product/product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/category.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interceptors/token-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/product-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/shared/alert.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlertService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/shared/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/shopping-cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingCartService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sub-category.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubCategoryService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/shopping-cart-dialog/shopping-cart-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-cart/shopping-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/table-list/table-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user-dashboard/main-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}